{"componentChunkName":"component---src-templates-docs-js","path":"/javascript/5_js_examples","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"E-Learning | Reativa","docsLocation":""}},"mdx":{"id":"8411a3a9-32de-5b9e-a274-c43ac5ebc480","fields":{"id":"8411a3a9-32de-5b9e-a274-c43ac5ebc480","title":"Exemplos de c칩digos em Javascript","slug":"/javascript/5_js_examples"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Exemplos de c칩digos em Javascript\",\n  \"metaTitle\": \"snippets de c칩digos em JS\",\n  \"metaDescription\": \"exemplos pr치ticos javascript es6\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Exemplos de c\\xF3digos \\xFAteis em Javascript\"), mdx(\"h2\", null, \"ARRAY\"), mdx(\"p\", null, \"Verifique se todos os elementos da lista s\\xE3o iguais a um determinado valor\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isEqual = (arr, value) => arr.every(item => item === value);\\n\\n// isEqual(['foo', 'foo'], 'foo') === true\\n// isEqual(['foo', 'bar'], 'foo') === false\\n// isEqual(['bar', 'bar'], 'foo') === false\\n\")), mdx(\"p\", null, \"Verifique se todos os itens em uma lista s\\xE3o iguais\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const areEqual = arr => arr.length > 0 && arr.every(item => item === arr[0]);\\n\\n// Or\\nconst areEqual = arr => new Set(arr).size === 1;\\n\\n// areEqual([1, 2, 3, 4]) === false\\n// areEqual(['hello', 'hello', 'hello']) === true\\n\")), mdx(\"p\", null, \"Verifique se uma lista cont\\xE9m um valor correspondente a alguns crit\\xE9rios\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const contains = (arr, criteria) => arr.some(v => criteria(v));\\n\\n// contains([10, 20, 30], v => v > 25 )  === true\\n// contains([10, 20, 30], v => v > 100 || v < 15 )  === true\\n// contains([10, 20, 30], v => v > 100 )  === false\\n\")), mdx(\"p\", null, \"Verifique se uma lista n\\xE3o est\\xE1 vazia\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isNotEmpty = arr => Array.isArray(arr) && Object.keys(arr).length > 0;\\n\\n// isNotEmpty([]) === false\\n// isNotEmpty([1, 2, 3]) === true\\n\")), mdx(\"p\", null, \"Verifique se uma lista \\xE9 subconjunto de outra lista\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isSubset = (a, b) => (new Set(b)).size === (new Set(b.concat(a))).size;\\n\\n// isSubset([1,2], [1,2,3,4]) === true\\n// isSubset([1,2,5], [1,2,3,4]) === false\\n// isSubset([6], [1,2,3,4]) === false\\n\")), mdx(\"p\", null, \"Verifique se um objeto \\xE9 uma lista\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isArray = obj => Array.isArray(obj);\\n\")), mdx(\"p\", null, \"Clonar uma lista\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `arr` is an array\\nconst clone = arr => arr.slice(0);\\n\\n// Or\\nconst clone = arr => [...arr];\\n\\n// Or\\nconst clone = arr => Array.from(arr);\\n\\n// Or\\nconst clone = arr => arr.map(x => x);\\n\\n// Or\\nconst clone = arr => JSON.parse(JSON.stringify(arr));\\n\\n// Or\\nconst clone = arr => arr.concat([]);\\n\")), mdx(\"p\", null, \"Compare duas listas, independentemente do pedido\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `a` and `b` are arrays\\nconst isEqual = (a, b) => JSON.stringify(a.sort()) === JSON.stringify(b.sort());\\n\\n// Or\\nconst isEqual = (a, b) => a.length === b.length && a.every((v) => b.includes(v));\\n\\n// Or\\nconst isEqual = (a, b) => a.length === b.length && (new Set(a.concat(b)).size === a.length);\\n\\n// isEqual([1, 2, 3], [1, 2, 3]) === true\\n// isEqual([1, 2, 3], [1, 3, 2]) === true\\n// isEqual([1, 2, 3], [1, '2', 3]) === false\\n\")), mdx(\"p\", null, \"Compare duas listas\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `a` and `b` are arrays\\nconst isEqual = (a, b) => JSON.stringify(a) === JSON.stringify(b);\\n\\n// Or\\nconst isEqual = (a, b) => a.length === b.length && a.every((v, i) => v === b[i]);\\n\\n// isEqual([1, 2, 3], [1, 2, 3]) === true\\n// isEqual([1, 2, 3], [1, '2', 3]) === false\\n\")), mdx(\"p\", null, \"Converter uma lista de objetos em um \\xFAnico objeto\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const toObject = (arr, identifier) => arr.reduce((a, b) => ({ ...a, [b[identifier]]: b }), {});\\n\\n/*\\ntoObject(\\n    [\\n        { id: '1', name: 'Alpha', gender: 'Male' },\\n        { id: '2', name: 'Bravo', gender: 'Male' },\\n        { id: '3', name: 'Charlie', gender: 'Female' },\\n    ],\\n    'id'\\n)\\nreturns\\n{\\n    '1': { id: '1', name: 'Alpha', gender: 'Male' },\\n    '2': { id: '2', name: 'Bravo', gender: 'Male' },\\n    '3': { id: '3', name: 'Charlie', gender: 'Female' },\\n}\\n*/\\n\")), mdx(\"p\", null, \"Converter uma lista de seq\\xFC\\xEAncias de caracteres em n\\xFAmeros\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const toNumbers = arr => arr.map(Number);\\n\\n// Or\\nconst toNumbers = arr => arr.map(x => +x);\\n\\n// toNumbers(['2', '3', '4']) returns [2, 3, 4]\\n\")), mdx(\"p\", null, \"Crie uma lista de soma acumulada\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const accumulate = arr => arr.map((sum => value => sum += value)(0));\\n\\n// Or\\nconst accumulate = arr => arr.reduce((a, b, i) => i === 0 ? [b] : [...a, b + a[i - 1]], []);\\n\\n// Or\\nconst accumulate = arr => arr.reduce((a, b, i) => i === 0 ? [b] : [...a, b + a[i - 1]], 0);\\n\\n/*\\naccumulate([1, 2, 3, 4]) === [1, 3, 6, 10]\\n// 1             = 1\\n// 1 + 2         = 3\\n// 1 + 2 + 3     = 6\\n// 1 + 2 + 3 + 4 = 10\\n*/\\n\")), mdx(\"p\", null, \"Crie uma lista de n\\xFAmeros no intervalo especificado\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const range = (min, max) => [...Array(max - min + 1).keys()].map(i => i + min);\\n\\n// Or\\nconst range = (min, max) => Array(max - min + 1).fill(0).map((_, i) => min + i);\\n\\n// Or\\nconst range = (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i);\\n\\n// range(5, 10) === [5, 6, 7, 8, 9, 10]\\n\")), mdx(\"p\", null, \"Esvaziar uma lista\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const empty = arr => arr.length = 0;\\n\\n// Or\\narr = [];\\n\")), mdx(\"p\", null, \"Encontre o comprimento da string mais longa em uma lista\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const findLongest = words => Math.max(...(words.map(el => el.length)));\\n\\n// findLongest(['always','look','on','the','bright','side','of','life']) === 6;\\n\")), mdx(\"p\", null, \"Encontre o item m\\xE1ximo de uma lista\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const max = arr => Math.max(...arr);\\n\")), mdx(\"p\", null, \"Encontre o item m\\xEDnimo de uma lista\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const min = arr => Math.min(...arr);\\n\")), mdx(\"p\", null, \"Achatar uma lista\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const flat = arr => [].concat.apply([], arr.map(a => Array.isArray(a) ? flat(a) : a));\\n// Or\\nconst flat = arr => arr.reduce((a, b) => Array.isArray(b) ? [...a, ...flat(b)] : [...a, b], []);\\n\\n// Or\\n// See the browser compatibility at https://caniuse.com/#feat=array-flat\\nconst flat = arr => arr.flat();\\n\\n// flat(['cat', ['lion', 'tiger']]) returns ['cat', 'lion', 'tiger']\\n\")), mdx(\"p\", null, \"Obter um item aleat\\xF3rio de uma lista\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const randomItem = arr => arr[(Math.random() * arr.length) | 0];\\n\")), mdx(\"p\", null, \"Obter a m\\xE9dia de uma lista\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const average = arr => arr.reduce((a, b) => a + b, 0) / arr.length;\\n\")), mdx(\"p\", null, \"Obter a interse\\xE7\\xE3o de listas\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// space: O(n)\\n// time: O(n)\\nconst getIntersection = (...arr) => [...(arr.flat().reduce((map, v) => map.set(v, (map.get(v) || 0) + 1), new Map()))].reduce((acc, [v, count]) => void (count === arr.length && acc.push(v)) || acc, []);\\n\\n// Or\\n// Only support two arrays\\nconst getIntersection = (a, b) => [...new Set(a)].filter(v => b.includes(v));\\n\\n// getIntersection([1, 2, 3], [2, 3, 4, 5]) returns [2, 3]\\n// getIntersection([1, 2, 3], [2, 3, 4, 5], [1, 3, 5]) returns [3]\\n\")), mdx(\"p\", null, \"Obter a soma da lista de n\\xFAmeros\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const sum = arr => arr.reduce((a, b) => a + b, 0);\\n\\nObter os valores exclusivos de uma lista\\n\\n```js\\nconst unique = arr => [...new Set(arr)];\\n\\n// Or\\nconst unique = arr => arr.filter((el, i, array) => array.indexOf(el) === i);\\n\\n// Or\\nconst unique = arr => arr.reduce((acc, el) => acc.includes(el) ? acc : [...acc, el], []);\\n\")), mdx(\"p\", null, \"Obter uni\\xE3o de listas\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const union = (...arr) => [...new Set(arr.flat())];\\n\\n// union([1, 2], [2, 3], [3]) returns [1, 2, 3]\\n\")), mdx(\"p\", null, \"Mesclar duas listas\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Merge but don't remove the duplications\\nconst merge = (a, b) => a.concat(b);\\n// Or\\nconst merge = (a, b) => [...a, ...b];\\n\\n// Merge and remove the duplications\\nconst merge = [...new Set(a.concat(b))];\\n// Or\\nconst merge = [...new Set([...a, ...b])];\\n\")), mdx(\"p\", null, \"Particionar uma lista com base em uma condi\\xE7\\xE3o\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const partition = (arr, criteria) => arr.reduce((acc, i) => (acc[criteria(i) ? 0 : 1].push(i), acc), [[], []]);\\n\\n// Example\\npartition([1, 2, 3, 4, 5], n => n % 2);     // returns [[2, 4], [1, 3, 5]]\\n\\nRemover valores falsos da lista\\n\\n```js\\nconst removeFalsy = arr => arr.filter(Boolean);\\n\\n// removeFalsy([0, 'a string', '', NaN, true, 5, undefined, 'another string', false])\\n// returns ['a string', true, 5, 'another string']\\n\")), mdx(\"p\", null, \"Dividir uma lista em peda\\xE7os\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const chunk = (arr, size) => arr.reduce((acc, e, i) => (i % size ? acc[acc.length - 1].push(e) : acc.push([e]), acc), []);\\n\\n// Example\\nchunk([1, 2, 3, 4, 5, 6, 7, 8], 3);     // returns [[1, 2, 3], [4, 5, 6], [7, 8]]\\nchunk([1, 2, 3, 4, 5, 6, 7, 8], 4);     // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\\n\")), mdx(\"p\", null, \"Descompacte uma lista de listas\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const unzip = arr => arr.reduce((acc, c) => (c.forEach((v, i) => acc[i].push(v)), acc), Array.from({ length: Math.max(...arr.map(a => a.length)) }, (_) => []));\\n\\n// Example\\nunzip([['a', 1], ['b', 2], ['c', 3], ['d', 4], ['e', 5]]);  // [['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, 5]]\\n\\n/*\\n    a     1\\n        b   2\\n        c 3\\n        d 4\\n        e 5\\n*/\\n\")), mdx(\"p\", null, \"Zip v\\xE1rias listas\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const zip = (...arr) => Array.from({ length: Math.max(...arr.map(a => a.length)) }, (_, i) => arr.map(a => a[i]));\\n\\n// Example\\nzip(['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, 5]);   // [['a', 1], ['b', 2], ['c', 3], ['d', 4], ['e', 5]]\\n\\n/*\\nDoes it look like a zipper?\\n        a 1\\n        b 2\\n        c   3\\n        d     4\\n        e       5\\n*/\\n\")), mdx(\"p\", null, \"DATA HORA\"), mdx(\"p\", null, \"Calcular o n\\xFAmero de dias de diferen\\xE7a entre duas datas\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const diffDays = (date, otherDate) => Math.ceil(Math.abs(date - otherDate) / (1000 * 60 * 60 * 24));\\n\\n// diffDays(new Date('2014-12-19'), new Date('2020-01-01')) === 1839\\n\")), mdx(\"p\", null, \"Verifique se a data est\\xE1 entre duas datas\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `min`, `max` and `date` are `Date` instances\\nconst isBetween = (date, min, max) => (date.getTime() >= min.getTime() && date.getTime() <= max.getTime());\\n\")), mdx(\"p\", null, \"Verifique se a data \\xE9 hoje\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `date` is a Date object\\nconst isToday = (date) => date.toISOString().slice(0, 10) === new Date().toISOString().slice(0, 10);\\n\")), mdx(\"p\", null, \"Verifique se um ano \\xE9 bissexto\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isLeapYear = year => (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));\\n\\n// Or\\n// Get the number of days in February\\nconst isLeapYear = year => new Date(year, 1, 29).getDate() === 29;\\n\")), mdx(\"p\", null, \"Compare duas datas\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `a` and `b` are `Date` instances\\nconst compare = (a, b) => a.getTime() > b.getTime();\\n\\n// compare(new Date('2020-03-30'), new Date('2020-01-01')) === true\\n\")), mdx(\"p\", null, \"Converter uma data para o formato dd mm aaaa\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `date` is a `Date` object\\nconst formatYmd = date => date.toISOString().slice(0, 10);\\n\\n// formatYmd(new Date()) returns `2020-05-06`\\n\")), mdx(\"p\", null, \"Converter segundos para o formato hh mm ss\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `s` is number of seconds\\nconst formatSeconds = s => new Date(s * 1000).toISOString().substr(11, 8);\\n\\n// Or\\nconst formatSeconds = s => (new Date(s * 1000)).toUTCString().match(/(\\\\d\\\\d:\\\\d\\\\d:\\\\d\\\\d)/)[0];\\n\\n// Or\\nconst formatSeconds = s => [parseInt(s / 60 / 60), parseInt(s / 60 % 60), parseInt(s % 60)].join(':').replace(/\\\\b(\\\\d)\\\\b/g, '0$1');\\n\\n// Example\\nformatSeconds(200);     // '00:03:20'\\nformatSeconds(500);     // '00:08:20'\\n\")), mdx(\"p\", null, \"Extrair ano m\\xEAs dia hora minuto segundo e milissegundo de uma data\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `date` is a `Date` object\\nconst extract = date => date.toISOString().split(/[^0-9]/).slice(0, -1);\\n\\n// `extract` is an array of [year, month, day, hour, minute, second, millisecond]\\n\")), mdx(\"p\", null, \"Formate uma data para a localidade especificada\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `date` is a `Date` object\\n// `locale` is a locale (en-US, pt-BR, for example)\\nconst format = (date, locale) => new Intl.DateTimeFormat(locale).format(date);\\n\\n// format(new Date(), 'pt-BR') returns `06/05/2020`\\n\")), mdx(\"p\", null, \"Obter o timestamp atual em segundos\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const ts = () => Math.floor(new Date().getTime() / 1000);\\n\")), mdx(\"p\", null, \"Obter o nome do m\\xEAs de uma data\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `date` is a Date object\\nconst getMonthName = date => ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October',' November', 'December'][date.getMonth()];\\n\")), mdx(\"p\", null, \"Obter o n\\xFAmero de dias em um determinado m\\xEAs\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `month` is zero-based index\\nconst daysInMonth = (month, year) => new Date(year, month, 0).getDate();\\n\")), mdx(\"p\", null, \"Obter o dia da semana de uma data\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `date` is a Date object\\nconst getWeekday = date => ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][date.getDay()];\\n\")), mdx(\"p\", null, \"Classificar uma lista de datas\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `arr` is an array of `Date` items\\nconst sortDescending = arr => arr.sort((a, b) => a.getTime() > b.getTime());\\nconst sortAscending = arr => arr.sort((a, b) => a.getTime() < b.getTime());\\n\")), mdx(\"p\", null, \"Validar uma data gregoriana\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `m`: the month (zero-based index)\\n// `d`: the day\\n// `y`: the year\\nconst isValidDate = (m, d, y) => 0 <= m && m <= 11 && 0 < y && y < 32768 && 0 < d && d <= (new Date(y, m, 0)).getDate();\\n\")), mdx(\"p\", null, \"DOM\"), mdx(\"p\", null, \"Verifique se um elemento \\xE9 descendente de outro\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isDescendant = (child, parent) => parent.contains(child);\\n\")), mdx(\"p\", null, \"Verifique se um elemento est\\xE1 focado\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const hasFocus = ele => (ele === document.activeElement);\\n\")), mdx(\"p\", null, \"Verifique se os eventos de toque s\\xE3o suportados\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const touchSupported = () => ('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch);\\n\")), mdx(\"p\", null, \"Detectar o navegador Internet Explorer\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isIE = !!document.documentMode;\\n\")), mdx(\"p\", null, \"Detectar o navegador macos\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isMacBrowser = /Mac|iPod|iPhone|iPad/.test(navigator.platform);\\n\")), mdx(\"p\", null, \"Obter todos os irm\\xE3os de um elemento\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const siblings = ele => [].slice.call(ele.parentNode.children).filter((child) => (child !== ele));\\n\")), mdx(\"p\", null, \"Obter o texto selecionado\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const getSelectedText = () => window.getSelection().toString();\\n\")), mdx(\"p\", null, \"Volte para a p\\xE1gina anterior\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"history.back();\\n\\n// Or\\nhistory.go(-1);\\n\")), mdx(\"p\", null, \"Ocultar um elemento\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Pick the method that is suitable for your use case\\nconst hide = ele => ele.style.display = 'none';\\n\\n// Or\\nconst hide = ele => ele.style.visibility = 'hidden';\\n\")), mdx(\"p\", null, \"Inserir um elemento ap\\xF3s o outro\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const insertAfter = (ele, anotherEle) => anotherEle.parentNode.insertBefore(ele, anotherEle.nextSibling);\\n\\n// Or\\nconst insertAfter = (ele, anotherEle) => anotherEle.insertAdjacentElement('afterend', ele);\\n\")), mdx(\"p\", null, \"Inserir um elemento antes do outro\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const insertBefore = (ele, anotherEle) => anotherEle.parentNode.insertBefore(ele, anotherEle);\\n\\n// Or\\nconst insertBefore = (ele, anotherEle) => anotherEle.insertAdjacentElement('beforebegin', ele);\\n\")), mdx(\"p\", null, \"Inserir html fornecido ap\\xF3s um elemento\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const insertHtmlAfter = (html, ele) => ele.insertAdjacentHTML('afterend', html);\\n\")), mdx(\"p\", null, \"Inserir html fornecido antes de um elemento\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const insertHtmlBefore = (html, ele) => ele.insertAdjacentHTML('beforebegin', html);\\n\")), mdx(\"p\", null, \"Redirecionar para outra p\\xE1gina\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const goTo = url => location.href = url;\\n\")), mdx(\"p\", null, \"Recarregar a p\\xE1gina atual\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const reload = () => location.reload();\\n\\n// Or\\nconst reload = () => (location.href = location.href);\\n\")), mdx(\"p\", null, \"Substituir um elemento\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const replace = (ele, newEle) => ele.parentNode.replaceChild(newEle, ele);\\n\")), mdx(\"p\", null, \"Role para o topo da p\\xE1gina\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const goToTop = () => window.scrollTo(0, 0);\\n\")), mdx(\"p\", null, \"Mostrar um elemento\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const show = ele => ele.style.display = '';\\n\")), mdx(\"p\", null, \"Retirar html de um determinado texto\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const stripHtml = html => (new DOMParser().parseFromString(html, 'text/html')).body.textContent || '';\\n\")), mdx(\"p\", null, \"Alternar um elemento\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const toggle = ele => (ele.style.display = (ele.style.display === 'none') ? 'block' : 'none');\\n\")), mdx(\"p\", null, \"FUN\\xC7\\xC3O\"), mdx(\"p\", null, \"Verifique se um valor \\xE9 uma fun\\xE7\\xE3o\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isFunction = v => ['[object Function]', '[object GeneratorFunction]', '[object AsyncFunction]', '[object Promise]'].includes(Object.prototype.toString.call(v));\\n\\n// Example\\nisFunction(function() {});          // true\\nisFunction(function*() {});         // true\\nisFunction(async function() {});    // true\\n\")), mdx(\"p\", null, \"Verifique se um valor \\xE9 uma fun\\xE7\\xE3o geradora\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isGeneratorFunction = v => Object.prototype.toString.call(v) === '[object GeneratorFunction]';\\n\\n// Example\\nisGeneratorFunction(function() {});     // false\\nisGeneratorFunction(function*() {});    // true\\n\")), mdx(\"p\", null, \"Verifique se um valor \\xE9 uma fun\\xE7\\xE3o ass\\xEDncrona\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isAsyncFunction = v => Object.prototype.toString.call(v) === '[object AsyncFunction]';\\n\\n// Example\\nisAsyncFunction(function() {});         // false\\nisAsyncFunction(function*() {});        // false\\nisAsyncFunction(async function() {});   // true\\n\")), mdx(\"p\", null, \"Componha fun\\xE7\\xF5es da esquerda para a direita\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Compose functions from left to right\\nconst pipe = (...fns) => x => fns.reduce((y, f) => f(y), x);\\n\\n// Example\\nconst lowercase = str => str.toLowerCase();\\nconst capitalize = str => `${str.charAt(0).toUpperCase()}${str.slice(1)}`;\\nconst reverse = str => str.split('').reverse().join('');\\n\\nconst fn = pipe(lowercase, capitalize, reverse);\\n\\n// We will execute `lowercase`, `capitalize` and `reverse` in order\\nfn('Hello World') === 'dlrow olleH';\\n\")), mdx(\"p\", null, \"Fun\\xE7\\xF5es de composi\\xE7\\xE3o\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Compose functions from right to left\\nconst compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);\\n\\n// Example\\nconst lowercase = str => str.toLowerCase();\\nconst capitalize = str => `${str.charAt(0).toUpperCase()}${str.slice(1)}`;\\nconst reverse = str => str.split('').reverse().join('');\\n\\nconst fn = compose(reverse, capitalize, lowercase);\\n\\n// We will execute `lowercase`, `capitalize` and `reverse` in order\\nfn('Hello World') === 'dlrow olleH';\\n\")), mdx(\"p\", null, \"Crie uma fun\\xE7\\xE3o vazia\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const noop = () => {};\\n\\n// Or\\nconst noop = Function.prototype;\\n\")), mdx(\"p\", null, \"Caril uma fun\\xE7\\xE3o\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const curry = (fn, ...args) => fn.length <= args.length ? fn(...args) : curry.bind(null, fn, ...args);\\n\\n// Example\\nconst sum = (a, b, c) => a + b + c;\\ncurry(sum)(1)(2)(3);    // 6\\ncurry(sum)(1, 2, 3);    // 6\\ncurry(sum, 1)(2, 3);    // 6\\ncurry(sum, 1)(2)(3);    // 6\\ncurry(sum, 1, 2)(3);    // 6\\ncurry(sum, 1, 2, 3);    // 6\\n\")), mdx(\"p\", null, \"Atraso na avalia\\xE7\\xE3o de uma fun\\xE7\\xE3o\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// returns a new version of `fn` that returns values as lazy evaluable\\nconst thunkfy = fn => (...args) => () => fn(...args);\\n\\n// Example\\nconst heavyComputation = x => doStuff(x);\\nconst unnecessarySlow = manyThings.map(heavyComputation)\\n    .find(result => result.criteria);\\nconst probablyFaster = manyThings.map(thunkfy(heavyComputation))\\n    .find(thunk => thunk().criteria);\\n\")), mdx(\"p\", null, \"Executar uma fun\\xE7\\xE3o uma vez\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const once = fn => ((ran = false) => () => ran ? fn : (ran = !ran, fn = fn()))();\\n\\n// Example\\nlet n = 0;\\nconst incOnce = once(() => ++n);\\nincOnce();      // n = 1\\nincOnce();      // n = 1\\nincOnce();      // n = 1\\n\")), mdx(\"p\", null, \"Inverter os argumentos de uma fun\\xE7\\xE3o\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Reverse the order of arguments\\nconst flip = fn => (...args) => fn(...args.reverse());\\n\\n// For binary functions\\nconst flip = fn => (b, a) => fn(a, b);\\n\\n// Or for curried functions\\nconst flip = fn => b => a => fn(a)(b);\\n\\n// Example\\nconst isParent = (parent, child) => parent.children.includes(child);\\nconst isChild = flip(isParent);\\n\")), mdx(\"p\", null, \"Fun\\xE7\\xE3o de identidade\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const identity = x => x;\\n\")), mdx(\"p\", null, \"Operador l\\xF3gico xor\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// returns `true` if one of the arguments is truthy and the other is falsy\\n\\nconst xor = (a, b) => (a && !b) || (!a && b);\\n\\n// Or\\nconst xor = (a, b) => !(!a && !b) && !(a && b);\\n\\n// Or\\nconst xor = (a, b) => Boolean(!a ^ !b);\\n\\n// Example\\n// xor(true, true) === false\\n// xor(false, false) === false\\n// xor(true, false) === true\\n// xor(false, true) === true\\n\")), mdx(\"p\", null, \"Memorizar uma fun\\xE7\\xE3o\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const memoize = fn => ((cache = {}) => arg => cache[arg] || (cache[arg] = fn(arg)))();\\n\\n// Example\\n// Calculate Fibonacci numbers\\nconst fibo = memoize(n => n <= 2 ? 1 : fibo(n - 1) + fibo(n - 2));\\n\\nfibo(1);    // 1\\nfibo(2);    // 1\\nfibo(3);    // 2\\nfibo(4);    // 3\\nfibo(5);    // 5\\nfibo(6);    // 8\\n\")), mdx(\"p\", null, \"Aplicar parcialmente uma fun\\xE7\\xE3o\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const partial = (fn, ...a) => (...b) => fn(...a, ...b);\\n\\n// Example\\nconst sum = (x, y) => x + y;\\nconst inc = partial(sum, 1);\\ninc(9);     // 10\\n\")), mdx(\"p\", null, \"Desenrole uma fun\\xE7\\xE3o\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `fn` is a curried function\\n// `n` is the depth of parameters\\nconst uncurry = (fn, n = 1) => (...args) => (acc => args => args.reduce((x, y) => x(y), acc))(fn)(args.slice(0, n));\\n\\n// Example\\nconst sum = a => b => c => a + b + c;\\nuncurry(sum, 1)(1)(2)(3);       // 6\\nuncurry(sum, 2)(1, 2)(3);       // 6\\nuncurry(sum, 3)(1, 2, 3);       // 6\\n\")), mdx(\"p\", null, \"MISC\"), mdx(\"p\", null, \"Verifique se um valor \\xE9 um n\\xFAmero\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isNumber = value => !isNaN(parseFloat(value)) && isFinite(value);\\n\")), mdx(\"p\", null, \"Verifique se um valor \\xE9 uma express\\xE3o regular\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isRegExp = value => Object.prototype.toString.call(value) === '[object RegExp]';\\n\")), mdx(\"p\", null, \"Verifique se um valor \\xE9 nulo\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isNil = (value) => value == null;\\n\")), mdx(\"p\", null, \"Verifique se um objeto \\xE9 uma promessa\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isPromise = obj => !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\\n\")), mdx(\"p\", null, \"Verifique se o c\\xF3digo est\\xE1 sendo executado no n\\xF3 js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\\n\")), mdx(\"p\", null, \"Verifique se o c\\xF3digo est\\xE1 sendo executado no navegador\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isBrowser = typeof window === 'object' && typeof document === 'object';\\n\")), mdx(\"p\", null, \"Converter celsius em fahrenheit\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const celsiusToFahrenheit = celsius => celsius * 9/5 + 32;\\n\\nconst fahrenheitToCelsius = fahrenheit => (fahrenheit - 32) * 5/9;\\n\\n// celsiusToFahrenheit(15) === 59\\n// celsiusToFahrenheit(0) === 32\\n// celsiusToFahrenheit(-20) === -4\\n\\n// fahrenheitToCelsius(59) === 15\\n// fahrenheitToCelsius(32) === 0\\n\")), mdx(\"p\", null, \"Converter hex para rgb\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const hexToRgb = hex => hex.replace(/^#?([a-f\\\\d])([a-f\\\\d])([a-f\\\\d])$/i, (_, r, g, b) => `#${r}${r}${g}${g}${b}${b}`).substring(1).match(/.{2}/g).map(x => parseInt(x, 16));\\n\\n// hexToRgb('#00ffff') === [0, 255, 255] \\n// hexToRgb('#0ff') === [0, 255, 255]\\n\")), mdx(\"p\", null, \"Converter cor rgb em hexadecimal\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const rgbToHex = (red, green, blue) => `#${((1 << 24) + (red << 16) + (green << 8) + blue).toString(16).slice(1)}`;\\n\\n// Or\\nconst rgbToHex = (red, green, blue) => `#${[red, green, blue].map(v => v.toString(16).padStart(2, '0')).join('')}`;\\n\\n// rgbToHex(0, 255, 255) === '#00ffff' \\n\")), mdx(\"p\", null, \"Detectar o modo escuro\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\\n\")), mdx(\"p\", null, \"Facilitando fun\\xE7\\xF5es\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Some easing functions\\n// See https://gist.github.com/gre/1650294 and https://easings.net\\n\\nconst linear = t => t;\\n\\nconst easeInQuad = t => t * t;\\nconst easeOutQuad = t => t * (2-t);\\nconst easeInOutQuad = t => t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\\n\\nconst easeInCubic = t => t * t * t;\\nconst easeOutCubic = t => (--t) * t * t + 1;\\nconst easeInOutCubic = t => t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\\n\\nconst easeInQuart = t => t * t * t * t;\\nconst easeOutQuart = t => 1 - (--t) * t * t * t;\\nconst easeInOutQuart = t => t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t;\\n\\nconst easeInQuint = t => t * t * t * t * t;\\nconst easeOutQuint = t => 1 + (--t) * t * t * t * t;\\nconst easeInOutQuint = t => t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t;\\n\\nconst easeInSine = t => 1 + Math.sin(Math.PI / 2 * t - Math.PI / 2);\\nconst easeOutSine = t => Math.sin(Math.PI / 2 * t);\\nconst easeInOutSine = t => (1 + Math.sin(Math.PI * t - Math.PI / 2)) / 2;\\n\\nconst easeInElastic = t => (.04 - .04 / t) * Math.sin(25 * t) + 1;\\nconst easeOutElastic = t => .04 * t / (--t) * Math.sin(25 * t);\\nconst easeInOutElastic = t => (t -= .5) < 0 ? (.02 + .01 / t) * Math.sin(50 * t) : (.02 - .01 / t) * Math.sin(50 * t) + 1;\\n\")), mdx(\"p\", null, \"Emule um lan\\xE7amento de dados\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const throwdice = () => ~~(Math.random() * 6) + 1;\\n\\n// throwdice() === 4 \\n// throwdice() === 1 \\n// throwdice() === 6 \\n\")), mdx(\"p\", null, \"Codificar um URL\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `encodeURIComponent` doesn't encode -_.!~*'()\\nconst encode = url => encodeURIComponent(url).replace(/!/g, '%21').replace(/~/g, '%7E').replace(/\\\\*/g, '%2A').replace(/'/g, '%27').replace(/\\\\(/g, '%28').replace(/\\\\)/g, '%29').replace(/%20/g, '+');\\n\")), mdx(\"p\", null, \"Gere um booleano aleat\\xF3rio\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const randomBoolean = () => Math.random() >= 0.5;\\n\")), mdx(\"p\", null, \"Gere uma cor hexadecimal aleat\\xF3ria\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const randomColor = () => `#${Math.random().toString(16).slice(2, 8).padEnd(6, '0')}`;\\n\")), mdx(\"p\", null, \"Gere um uuid aleat\\xF3rio\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const uuid = (a) => a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid);\\n\")), mdx(\"p\", null, \"Obter o valor de um par\\xE2metro de um URL\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const getParam = (url, param) => new URLSearchParams(new URL(url).search).get(param);\\n\\n// getParam('http://domain.com?message=hello', 'message') === 'hello'\\n\")), mdx(\"p\", null, \"Executar promessas em sequ\\xEAncia\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `promises` is an array of `Promise`\\nconst run = promises => promises.reduce((p, c) => p.then(rp => c.then(rc => [...rp, rc])), Promise.resolve([]));\\n\\n/*\\nrun(promises).then((results) => {\\n    // results is an array of promise results in the same order\\n});\\n*/\\n\")), mdx(\"p\", null, \"Troque duas vari\\xE1veis\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"[a, b] = [b, a];\\n\")), mdx(\"p\", null, \"Aguarde um pouco de tempo\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const wait = async (milliseconds) => new Promise((resolve) => setTimeout(resolve, milliseconds));\\n\")), mdx(\"p\", null, \"N\\xDAMERO\"), mdx(\"p\", null, \"Adicionar um sufixo ordinal a um n\\xFAmero\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `n` is a position number\\nconst addOrdinal = n => `${n}${['st', 'nd', 'rd'][((n + 90) % 100 - 10) % 10 - 1] || 'th'}`;\\n\\n// Or\\nconst addOrdinal = n => `${n}${[, 'st', 'nd', 'rd'][/1?.$/.exec(n)] || 'th'}`;\\n\\n// Or\\nconst addOrdinal = n => `${n}${[, 'st', 'nd', 'rd'][n % 100 >> 3^1 && n % 10] || 'th'}`;\\n\\n// Or\\nconst addOrdinal = n => `${n}${{one: 'st', two: 'nd', few: 'rd', other: 'th'}[new Intl.PluralRules('en', { type: 'ordinal' }).select(n)]}`;\\n\\n// addOrdinal(1) === '1st'\\n// addOrdinal(2) === '2nd'\\n// addOrdinal(3) === '3rd'\\n// addOrdinal(11) === '11th'\\n// addOrdinal(12) === '13th'\\n// addOrdinal(13) === '13th'\\n\")), mdx(\"p\", null, \"Calcular n\\xFAmeros de fibonacci\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const fibo = (n, memo = {}) => memo[n] || (n <= 2 ? 1 : (memo[n] = fibo(n - 1, memo) + fibo(n - 2, memo)));\\n\\n// Examples\\nfibo(1);    // 1\\nfibo(2);    // 1\\nfibo(3);    // 2\\nfibo(4);    // 3\\nfibo(5);    // 5\\nfibo(6);    // 8\\n\")), mdx(\"p\", null, \"Calcular a m\\xE9dia de argumentos\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const average = (...args) => args.reduce((a, b) => a + b) / args.length;\\n\\n// average(1, 2, 3, 4) === 2.5\\n\")), mdx(\"p\", null, \"Calcular a divis\\xE3o dos argumentos\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const division = (...args) => args.reduce((a, b) => a / b);\\n\\n// division(1, 2, 3, 4) === 0.04166666666666666\\n\")), mdx(\"p\", null, \"Calcular o \\xEDndice de modifica\\xE7\\xE3o da cole\\xE7\\xE3o\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const mod = (a, b) => ((a % b) + b) % b;\\n\\n// mod(-1, 5) === 4\\n// mod(3, 5) === 3\\n// mod(6, 5) === 1\\n\")), mdx(\"p\", null, \"Calcular o restante da divis\\xE3o de argumentos\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const remainder = (...args) => args.reduce((a, b) => a % b);\\n\\n// remainder(1, 2, 3, 4) === 1\\n\\nCalcular a soma dos argumentos\\n\\n```js\\nconst sum = (...args) => args.reduce((a, b) => a + b);\\n\\n// sum(1, 2, 3, 4) === 10\\n\\nVerifique se um n\\xFAmero inteiro \\xE9 um n\\xFAmero primo\\n\\n```js\\nconst isPrime = num => (num > 1) && Array(Math.floor(Math.sqrt(num)) - 1).fill(0).map((_, i) => i + 2).every(i => num % i !== 0);\\n\\nVerifique se um n\\xFAmero \\xE9 uma pot\\xEAncia de 2\\n\\n```js\\nconst isPowerOfTwo = number => (number & (number - 1)) === 0;\\n\\n// isPowerOfTwo(256) === true\\n// isPowerOfTwo(129) === false\\n\\nVerifique se um n\\xFAmero \\xE9 par\\n\\n```js\\nconst isEven = number => number % 2 === 0;\\n\\n// isEven(1) === false\\n// isEven(2) === true\\n\")), mdx(\"p\", null, \"Verifique se um n\\xFAmero \\xE9 negativo\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isNegative = number => Math.sign(number) === -1;\\n\\n// isNegative(-3) === true\\n// isNegative(8) === false\\n\")), mdx(\"p\", null, \"Verifique se um n\\xFAmero \\xE9 \\xEDmpar\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isOdd = number => number % 2 !== 0;\\n\\n// isOdd(1) === true\\n// isOdd(2) === false\\n\")), mdx(\"p\", null, \"Verifique se um n\\xFAmero \\xE9 positivo\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isPositive = number => Math.sign(number) === 1;\\n\\n// isPositive(3) === true\\n// isPositive(-8) === false\\n\")), mdx(\"p\", null, \"Prenda um n\\xFAmero entre dois valores\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const clamp = (val, min = 0, max = 1) => Math.max(min, Math.min(max, val));\\n\\n// clamp(199, 10, 25) === 25;\\n\")), mdx(\"p\", null, \"Calcular o maior divisor comum entre dois n\\xFAmeros\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const gcd = (a, b) => b === 0 ? a : gcd(b, a % b);\\n\\n// gcd(10, 15) === 5\\n\")), mdx(\"p\", null, \"Converter uma sequ\\xEAncia em n\\xFAmero\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const toNumber = str => +str;\\n\\n// toNumber('42') === 42\\n\")), mdx(\"p\", null, \"Gere um n\\xFAmero de ponto flutuante aleat\\xF3rio em um determinado intervalo\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const randomFloat = (min, max) => Math.random() * (max - min) + min;\\n\")), mdx(\"p\", null, \"Gere um n\\xFAmero inteiro aleat\\xF3rio em determinado intervalo\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const randomInteger = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\\n\")), mdx(\"p\", null, \"Multiplicar argumentos\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const mul = (...args) => args.reduce((a, b) => a * b);\\n\\n// mul(1, 2, 3, 4) === 24\\n\")), mdx(\"p\", null, \"Prefixar um n\\xFAmero inteiro com zeros\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const prefixWithZeros = (number, length) => (number / Math.pow(10, length)).toFixed(length).substr(2);\\n\\n// Or\\nconst prefixWithZeros = (number, length) => `${Array(length).join('0')}${number}`.slice(-length);\\n\\n// Or\\nconst prefixWithZeros = (number, length) => String(number).padStart(length, '0');\\n\\n// prefixWithZeros(42, 5) === '00042'\\n\")), mdx(\"p\", null, \"Subtrair argumentos\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const subtract = (...args) => args.reduce((a, b) => a - b);\\n\\n// subtract(1, 2, 3, 4) === -8\\n\")), mdx(\"p\", null, \"OBJETO\"), mdx(\"p\", null, \"Verifique se um valor \\xE9 um objeto simples\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isPlainObject = v => (!!v && typeof v === 'object' && (v.__proto__ === null || v.__proto__ === Object.prototype));\\n\\n// isPlainObject(null) === false\\n// isPlainObject('hello world') === false\\n// isPlainObject([]) === false\\n// isPlainObject(Object.create(null)) === false\\n// isPlainObject(function() {}) === false\\n\\n// isPlainObject({}) === true\\n// isPlainObject({ a: '1', b: '2' }) === true\\n\")), mdx(\"p\", null, \"Verifique se um valor \\xE9 um objeto\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isObject = v => (v !== null && typeof v === 'object');\\n\\n// isObject(null) === false\\n// isObject('hello world') === false\\n\\n// isObject({}) === true\\n// isObject([]) === true \\n\")), mdx(\"p\", null, \"Verifique se um objeto est\\xE1 vazio\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isEmpty = obj => Object.keys(obj).length === 0 && obj.constructor === Object;\\n\\n// Or\\nconst isEmpty = obj => JSON.stringify(obj) === '{}';\\n\")), mdx(\"p\", null, \"Crie um mapa vazio que n\\xE3o tenha propriedades\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// `map` doesn't have any properties\\nconst map = Object.create(null);\\n\\n// The following `map` has `__proto__` property\\n// const map = {};\\n\")), mdx(\"p\", null, \"Obter o valor no caminho especificado de um objeto\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const getValue = (path, obj) => path.split('.').reduce((acc, c) => acc && acc[c], obj);\\n\\n// Example\\ngetValue('a.b', { a: { b: 'Hello World' } });   // 'Hello World';\\n\")), mdx(\"p\", null, \"Inverter chaves e valores de um objeto\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const invert = obj => Object.keys(obj).reduce((res, k) => Object.assign(res, {[obj[k]]: k}), {});\\n\\n// Example\\ninvert({ a: '1', b: '2', c: '3' });     // { 1: 'a', 2: 'b', 3: 'c' }\\n\")), mdx(\"p\", null, \"Omita um subconjunto de propriedades de um objeto\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const omit = (obj, keys) => Object.keys(obj).filter(k => !keys.includes(k)).reduce((res, k) => Object.assign(res, {[k]: obj[k]}), {});\\n\\n// Example\\nomit({a: '1', b: '2', c: '3'}, ['a', 'b']);     // returns { c: '3' }\\n\")), mdx(\"p\", null, \"Escolha um subconjunto de propriedades de um objeto\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const pick = (obj, keys) => Object.keys(obj).filter(k => keys.includes(k)).reduce((res, k) => Object.assign(res, {[k]: obj[k]}), {});\\n\\n// Example\\npick({ a: '1', b: '2', c: '3' }, ['a', 'b']);   // returns { a: '1', b: '2' }\\n\")), mdx(\"p\", null, \"Raso copiar um objeto\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const shallowCopy = obj => Object.assign({}, obj);\\n\")), mdx(\"p\", null, \"CORDA\"), mdx(\"p\", null, \"Colocar em mai\\xFAscula uma sequ\\xEAncia\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const capitalize = str => `${str.charAt(0).toUpperCase()}${str.slice(1)}`;\\n\\n// capitalize('hello world') === 'Hello world'\\n\")), mdx(\"p\", null, \"Verifique se um caminho \\xE9 relativo\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isRelative = path => !/^([a-z]+:)?[\\\\\\\\/]/i.test(path);\\n\\n// Examples\\nisRelative('/foo/bar/baz');         // false\\nisRelative('C:\\\\\\\\foo\\\\\\\\bar\\\\\\\\baz');    // false\\nisRelative('foo/bar/baz.txt');      // true\\nisRelative('foo.md');               // true\\n\")), mdx(\"p\", null, \"Verifique se uma sequ\\xEAncia cont\\xE9m caracteres min\\xFAsculos\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const containsLowerCase = str => str !== str.toUpperCase();\\n\\n// Examples\\ncontainsLowerCase('Hello World');   // true\\ncontainsLowerCase('HELLO WORLD');   // false\\n\")), mdx(\"p\", null, \"Verifique se uma sequ\\xEAncia cont\\xE9m apenas d\\xEDgitos\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isNumeric = str => !/[^0-9]/.test(str);\\n\\n// isNumeric(2) === true\\n// isNumeric('23') === true\\n// isNumeric('00123') === true\\n\\n// isNumeric('1.23') === false\\n// isNumeric('-Infinity') === false\\n// isNumeric('Infinity') === false\\n// isNumeric('NaN') === false\\n\")), mdx(\"p\", null, \"Verifique se uma sequ\\xEAncia cont\\xE9m caracteres mai\\xFAsculos\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const containsUpperCase = str => str !== str.toLowerCase();\\n\\n// Examples\\ncontainsUpperCase('Hello World');   // true\\ncontainsUpperCase('hello world');   // false\\n\")), mdx(\"p\", null, \"Verifique se uma string cont\\xE9m espa\\xE7o em branco\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const containsWhitespace = str => str => /\\\\s/.test(str);\\n\\n// containsWhitespace('hello world') === true\\n\")), mdx(\"p\", null, \"Verifique se uma sequ\\xEAncia \\xE9 min\\xFAscula\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isLowerCase = str => str === str.toLowerCase();\\n\")), mdx(\"p\", null, \"Verifique se uma string est\\xE1 em mai\\xFAsculas\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isUpperCase = str => str === str.toUpperCase();\\n\")), mdx(\"p\", null, \"Verifique se um URL \\xE9 absoluto\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const isAbsoluteUrl = url => /^[a-z][a-z0-9+.-]*:/.test(url);\\n\\n// Example\\nisAbsoluteUrl('https://1loc.dev');          // true\\nisAbsoluteUrl('https://1loc.dev/foo/bar');  // true\\nisAbsoluteUrl('1loc.dev');                  // false\\nisAbsoluteUrl('//1loc.dev');                // false\\n\")), mdx(\"p\", null, \"Verifique se duas strings s\\xE3o anagramas\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const areAnagram = (str1, str2) => str1.toLowerCase().split('').sort().join('') === str2.toLowerCase().split('').sort().join('');\\n\\n// areAnagram('listen', 'silent') === true\\n// areAnagram('they see', 'the eyes') === true\\n\")), mdx(\"p\", null, \"Converter uma string em caixa de camelo\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const toCamelCase = str => str.trim().replace(/[-_\\\\s]+(.)?/g, (_, c) => c ? c.toUpperCase() : '');\\n\\n// Examples\\ntoCamelCase('background-color');            // backgroundColor\\ntoCamelCase('-webkit-scrollbar-thumb');     // WebkitScrollbarThumb\\ntoCamelCase('_hello_world');                // HelloWorld\\ntoCamelCase('hello_world');                 // helloWorld\\n\")), mdx(\"p\", null, \"Converta uma string em caso pascal\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const toPascalCase = str => (str.match(/[a-zA-Z0-9]+/g) || []).map(w => `${w.charAt(0).toUpperCase()}${w.slice(1)}`).join('');\\n\\n// Examples\\ntoPascalCase('hello world');    // 'HelloWorld'\\ntoPascalCase('hello.world');    // 'HelloWorld'\\ntoPascalCase('foo_bar-baz');    // FooBarBaz\\n\")), mdx(\"p\", null, \"Converta uma string em url slug\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const slugify = string => string.toLowerCase().replace(/\\\\s+/g, '-').replace(/[^\\\\w-]+/g, '');\\n\\n// slugify('Chapter One: Once upon a time...') === 'chapter-one-once-upon-a-time'\\n\")), mdx(\"p\", null, \"Converta um caminho de arquivo do Windows para o caminho unix\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const toUnixPath = path => path.replace(/[\\\\\\\\/]+/g, '/').replace(/^([a-zA-Z]+:|\\\\.\\\\/)/, '');\\n\\n// Examples\\ntoUnixPath('./foo/bar/baz');        // foo/bar/baz\\ntoUnixPath('C:\\\\\\\\foo\\\\\\\\bar\\\\\\\\baz');    // /foo/bar/baz\\n\")), mdx(\"p\", null, \"Converter estojo de camelo em estojo de kebab e vice-versa\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const kebabToCamel = str => str.replace(/-./g, m => m.toUpperCase()[1]);\\n\\n// kebabToCamel('background-color') === 'backgroundColor';\\n\\nconst camelToKebab = str => str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\\n\\n// camelToKebab('backgroundColor') === 'background-color';\\n\")), mdx(\"p\", null, \"Converter estojo de cobra em estojo de camelo\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const snakeToCamel = str => str.toLowerCase().replace(/(_\\\\w)/g, m => m.toUpperCase().substr(1));\\n\\n// snakeToCamel('HELLO_world') === 'helloWorld'\\n\")), mdx(\"p\", null, \"Gere uma sequ\\xEAncia aleat\\xF3ria a partir de caracteres especificados\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const generateString = (length, chars) => Array(length).fill('').map((v) => chars[Math.floor(Math.random() * chars.length)]).join('');\\n\\n// generateString(10, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\\n\")), mdx(\"p\", null, \"Gere uma sequ\\xEAncia aleat\\xF3ria com determinado comprimento\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const generateString = length => Array(length).fill('').map((v) => Math.random().toString(36).charAt(2)).join('');\\n\")), mdx(\"p\", null, \"Obter a extens\\xE3o do arquivo de um nome de arquivo\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const ext = fileName => fileName.split('.').pop();\\n\")), mdx(\"p\", null, \"Obter o nome do arquivo de um URL\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const fileName = url => url.substring(url.lastIndexOf('/') + 1);\\n\\n// fileName('http://domain.com/path/to/document.pdf') === 'document.pdf'\\n\")), mdx(\"p\", null, \"Obter o comprimento de uma string em bytes\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const bytes = str => new Blob([str]).size;\\n\\n// Examples\\nbytes('hello world');       // 11\\nbytes('\\uD83C\\uDF89');                // 4\\n\")), mdx(\"p\", null, \"Torne o primeiro caractere de uma string em min\\xFAsculas\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const lowercaseFirst = str => `${str.charAt(0).toLowerCase()}${str.slice(1)}`;\\n\\n// lowercaseFirst('Hello World') === 'hello World'\\n\")), mdx(\"p\", null, \"Normalizar barras do caminho do arquivo\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const normalizePath = path => path.replace(/[\\\\\\\\/]+/g, '/');\\n\\n// Example\\nnormalizePath('\\\\\\\\foo\\\\\\\\bar\\\\\\\\baz\\\\\\\\');         // /foo/bar/baz/\\nnormalizePath('.//foo//bar///////baz/');    // ./foo/bar/baz/\\n\")), mdx(\"p\", null, \"Remover espa\\xE7os de uma sequ\\xEAncia\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const removeSpaces = str => str.replace(/\\\\s/g, '');\\n\\n// removeSpaces('hel lo wor ld') === 'helloworld'\\n\")), mdx(\"p\", null, \"Repita uma string\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const repeat = (str, numberOfTimes) => str.repeat(numberOfTimes);\\n\\n// Or\\nconst repeat = (str, numberOfTimes) => Array(numberOfTimes).join(str);\\n\")), mdx(\"p\", null, \"Substitua todas as quebras de linha por elementos br\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const nl2br = str => str.replace(new RegExp('\\\\r?\\\\n', 'g'), '<br>');\\n\\n// In React\\nstr.split('\\\\n').map((item, index) => <React.Fragment key={index}>{item}<br /></React.Fragment>)\\n\")), mdx(\"p\", null, \"Substitua v\\xE1rios espa\\xE7os por um \\xFAnico espa\\xE7o\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Replace spaces, tabs and new line characters\\nconst replaceSpaces = str => str.replace(/\\\\s\\\\s+/g, ' ');\\n\\n// Only replace spaces\\nconst replaceOnlySpaces = str => str.replace(/  +/g, ' ');\\n\\n// replaceSpaces('this\\\\n   is     \\\\ta    \\\\rmessage') === 'this is a message'\\n\")), mdx(\"p\", null, \"Inverter uma string\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const reverse = str => str.split('').reverse().join('');\\n\\n// Or\\nconst reverse = str => [...str].reverse().join('');\\n\\n// Or\\nconst reverse = str => str.split('').reduce((rev, char)=> `${char}${rev}`, '');\\n\\n// Or\\nconst reverse = str => (str === '') ? '' : `${reverse(str.substr(1))}${str.charAt(0)}`;\\n\\n// reverse('hello world') === 'dlrow olleh'\\n\")), mdx(\"p\", null, \"Mai\\xFAscula o primeiro caractere de cada palavra em uma sequ\\xEAncia\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const uppercaseWords = str => str.split(' ').map(w => `${w.charAt(0).toUpperCase()}${w.slice(1)}`).join(' ');\\n\\n// Or\\nconst uppercaseWords = str => str.replace(/^(.)|\\\\s+(.)/g, c => c.toUpperCase());\\n\\n// uppercaseWords('hello world') === 'Hello World'\\n\")), mdx(\"p\", null, \"Baseado e adaptado do excelente 1loc, veja o \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/phuoc-ng/1loc\"\n  }), \"reposit\\xF3rio original\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#exemplos-de-c칩digos-칰teis-em-javascript","title":"Exemplos de c칩digos 칰teis em Javascript","items":[{"url":"#array","title":"ARRAY"}]}]},"parent":{"__typename":"File","id":"91d3317e-37c1-5e7c-951a-83788e22f198","relativePath":"javascript/5_js_examples.md"},"frontmatter":{"metaTitle":"snippets de c칩digos em JS","metaDescription":"exemplos pr치ticos javascript es6"}},"allMdx":{"edges":[{"node":{"id":"6b27bc12-bb81-5124-8b51-f70c283344a5","fields":{"slug":"/backend","title":"Back-end: Guia de estudos"}}},{"node":{"id":"e985dfcf-d448-5bf6-934b-fe2f7c86d732","fields":{"slug":"/articles","title":"Artigos Originais"}}},{"node":{"id":"2ab1dda2-a787-5684-b0e1-bb6c9017cd8b","fields":{"slug":"/css","title":"CSS"}}},{"node":{"id":"d9b206ac-dbe9-5c8c-a8c1-d802143c7f2f","fields":{"slug":"/devops","title":"Dev-ops: Guia de estudos"}}},{"node":{"id":"a3d209ba-1fb1-5b18-89ba-2927ed6ded51","fields":{"slug":"/git","title":"GIT"}}},{"node":{"id":"95318330-364f-5450-be1c-41ce2e970292","fields":{"slug":"/frontend","title":"Front-end: Guia de estudos"}}},{"node":{"id":"e857beb9-5d6a-597a-93da-293b0945daa5","fields":{"slug":"/html","title":"HTML"}}},{"node":{"id":"c7ef78ad-d567-59b1-8512-2a8b91bdbcb9","fields":{"slug":"/","title":"Reativa Tecnologia - Plataforma"}}},{"node":{"id":"d376f4ab-0540-59dd-a40c-2fdc8e2d559e","fields":{"slug":"/introduction","title":"Introdu칞칚o"}}},{"node":{"id":"aa3ca2ca-a148-55d8-a8dc-168e08169631","fields":{"slug":"/javascript","title":"Javascript"}}},{"node":{"id":"ea0d2131-26e2-53c7-b48d-bb4475cb725d","fields":{"slug":"/radar","title":"Radar de Tecnologias"}}},{"node":{"id":"ec9854e8-f208-52b3-b115-239e5ffcca70","fields":{"slug":"/articles/1_faculdade","title":"Faculdade de TI 칠 perda de tempo"}}},{"node":{"id":"147bfc38-1a7c-56a2-acf0-3777d79f1794","fields":{"slug":"/articles/como-fazer-as-empresas-sairem-no-tapa","title":"Como fazer as empresas sa칤rem no tapa por voc칡"}}},{"node":{"id":"62759732-4b77-5ca7-be1c-4b050c5fd054","fields":{"slug":"/articles/como-manter-um-dev-rotatitividade","title":"Como manter um dev na sua empresa e evitar rotatividade"}}},{"node":{"id":"a0dbc83b-673e-5cba-a051-081d782710e2","fields":{"slug":"/articles/melhores-empresas-para-nao-trabalhar","title":"Melhores empresas para n칚o se trabalhar"}}},{"node":{"id":"dc9725e8-b1fc-5dac-9199-0566d49d928e","fields":{"slug":"/javascript/eloquent-js","title":"Livro completo de Javascript"}}},{"node":{"id":"1ef3e34a-e6a0-555f-8966-621deebfd45b","fields":{"slug":"/articles/startups-ou-tradicionais","title":"Startups ou empresas grandes tradicionais? Qual 칠 a melhor para se trabalhar?"}}},{"node":{"id":"786e50f3-505c-532c-856e-d978effab9df","fields":{"slug":"/javascript/idiomatic-js","title":"Idiomatic JS"}}},{"node":{"id":"2d079d17-00ef-5b20-9643-0d7e05c622a5","fields":{"slug":"/javascript/js-best-practices","title":"Javascript clean code"}}},{"node":{"id":"6c009ed6-ae0c-5956-a662-341a7da6ca74","fields":{"slug":"/javascript/js-interview","title":"17 perguntas de Javascript para entrevistas"}}},{"node":{"id":"a795f54b-6ed5-57b2-8e56-6029e2b9f65a","fields":{"slug":"/deno","title":"Deno"}}},{"node":{"id":"a0be7563-5fab-5194-ae0e-bbc7eaaf8e62","fields":{"slug":"/deno/1_deno","title":"O que 칠 o Deno?"}}},{"node":{"id":"ecc51cdc-736e-59b1-aa3c-b90114080c5a","fields":{"slug":"/deno/2_porque_usar_deno","title":"Deno vai substituir o Node?"}}},{"node":{"id":"e885ecda-b288-5779-b707-71ee6d722fa6","fields":{"slug":"/deno/3_devo_aprender_deno","title":"Devo estudar Deno?"}}},{"node":{"id":"e2646799-9abd-5262-92cc-dbfd7245a2e7","fields":{"slug":"/deno/4_como_instalar_deno","title":"Como instalar o Deno?"}}},{"node":{"id":"8411a3a9-32de-5b9e-a274-c43ac5ebc480","fields":{"slug":"/javascript/5_js_examples","title":"Exemplos de c칩digos em Javascript"}}}]}},"pageContext":{"id":"8411a3a9-32de-5b9e-a274-c43ac5ebc480"}}}