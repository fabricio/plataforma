{"componentChunkName":"component---src-templates-docs-js","path":"/javascript/js-best-practices","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"E-Learning | Reativa","docsLocation":""}},"mdx":{"id":"2d079d17-00ef-5b20-9643-0d7e05c622a5","fields":{"id":"2d079d17-00ef-5b20-9643-0d7e05c622a5","title":"Javascript clean code","slug":"/javascript/js-best-practices"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Javascript clean code\",\n  \"metaTitle\": \"Clean code em Javascript\",\n  \"metaDescription\": \"guia para criar um código limpo em js ES6\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Clean Code \\xE9 um dos items que eu julgo como mais importante da programa\\xE7\\xE3o, \\xE9 a forma de voc\\xEA fazer o seu c\\xF3digo ser entendido pelos colegas de trabalho (ou pelo seu eu do futuro).\"), mdx(\"p\", null, \"Siga o \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/KISS_principle\"\n  }), \"KISS\"), \"(Keep it stupid simple) pois o c\\xF3digo que voc\\xEA faz hoje, voc\\xEA ter\\xE1 que dar manuten\\xE7\\xE3o amanh\\xE3.\"), mdx(\"p\", null, \"Tanto a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/felipe-augusto/clean-code-javascript\"\n  }), \"tradu\\xE7\\xE3o em PT-BR feita pelo Felipe Augusto (muito obrigado por ajudar a comunidade Felipe)\"), \" quanto o \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ryanmcdermott/clean-code-javascript\"\n  }), \"artigo original\"), \", est\\xE3o licenciados sob os termos \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ryanmcdermott/clean-code-javascript/blob/master/LICENSE\"\n  }), \"MIT\"), \" que permite a c\\xF3pia, modifica\\xE7\\xE3o e distribui\\xE7\\xE3o do conte\\xFAdo abaixo.\"), mdx(\"p\", null, \"Aproveitem o conte\\xFAdo e sempre busquem constribuir com a comunidade!\"), mdx(\"h1\", null, \"clean-code-javascript\"), mdx(\"h2\", null, \"\\xCDndice\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"Introdu\\xE7\\xE3o\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"Vari\\xE1veis\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"Fun\\xE7\\xF5es\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"Objetos e Estruturas de Dados\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"Classes\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"SOLID\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"Testes\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"Concorr\\xEAncia\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"Tratamento de Erros\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"Formata\\xE7\\xE3o\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"Coment\\xE1rios\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"Tradu\\xE7\\xF5es\"))), mdx(\"h2\", null, \"Introdu\\xE7\\xE3o\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"http://www.osnews.com/images/comics/wtfm.jpg\",\n    \"alt\": \"Imagem humorística da estimativa de qualidade do software baseado na contagem de quantos palavrões você gritou enquanto lia o código.\"\n  }))), mdx(\"p\", null, \"Princ\\xEDpios da Engenharia de Software, do livro de Robert C. Martin\\\\\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.amazon.com.br/C%C3%B3digo-Limpo-Habilidades-Pr%C3%A1ticas-Software/dp/8576082675\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"C\\xF3digo Limpo\")), \",\\\\\\nadaptados para JavaScript. Isto n\\xE3o \\xE9 um guia de estilos. \\xC9 um guia para se produzir c\\xF3digo\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ryanmcdermott/3rs-of-software-architecture\"\n  }), \"leg\\xEDvel, reutiliz\\xE1vel e refator\\xE1vel\"), \"\\xA0em JavaScript.\"), mdx(\"p\", null, \"Nem todo princ\\xEDpio demonstrado deve ser seguido rigorosamente, e ainda menos s\\xE3o os que possuem consenso universal. S\\xE3o orienta\\xE7\\xF5es e nada mais, entretanto, foram usadas em c\\xF3digo durante muitos anos de experi\\xEAncia coletiva pelos autores de\\xA0\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"C\\xF3digo limpo\"), \".\"), mdx(\"p\", null, \"Nosso of\\xEDcio de engenharia de software tem pouco mais de 50 anos e ainda estamos aprendendo muito. Quando a arquitetura de software for t\\xE3o velha quanto a pr\\xF3pria arquitetura, talvez ent\\xE3o tenhamos regras mais r\\xEDgidas para seguir. Por enquanto, deixe que estas orienta\\xE7\\xF5es sirvam como crit\\xE9rio para se avaliar a qualidade de c\\xF3digo JavaScript que tanto voc\\xEA e o seu time produzirem.\"), mdx(\"p\", null, \"Mais uma coisa: aprender isto n\\xE3o ir\\xE1 lhe transformar imediatamente em um desenvolvedor de software melhor e trabalhar com eles por muitos anos n\\xE3o quer dizer que voc\\xEA n\\xE3o cometer\\xE1 erros. Toda por\\xE7\\xE3o de c\\xF3digo come\\xE7a com um rascunho, como argila molhada sendo moldada em sua forma final. Finalmente, talhamos as imperfei\\xE7\\xF5es quando revisamos com nossos colegas. N\\xE3o se bata pelos primeiros rascunhos que ainda precisam de melhorias. Ao inv\\xE9s, bata em seu c\\xF3digo.\"), mdx(\"h2\", null, \"Vari\\xE1veis\"), mdx(\"h3\", null, \"Use nomes de vari\\xE1veis que tenham significado e sejam pronunci\\xE1veis\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const yyyymmdstr = moment().format('YYYY/MM/DD');\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const currentDate = moment().format('YYYY/MM/DD');\\n\\n\")), mdx(\"h3\", null, \"Use o mesmo vocabul\\xE1rio para o mesmo tipo de vari\\xE1vel\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"getUserInfo();\\ngetClientData();\\ngetCustomerRecord();\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"getUser();\\n\\n\")), mdx(\"h3\", null, \"Use nomes pesquis\\xE1veis\"), mdx(\"p\", null, \"N\\xF3s iremos ler mais c\\xF3digo que escrever. \\xC9 importante que o c\\xF3digo que escrevemos seja leg\\xEDvel e pesquis\\xE1vel.\\xA0\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"N\\xE3o\"), \"\\xA0dando nomes em vari\\xE1veis que sejam significativos para entender nosso programa, machucamos nossos leitores. Torne seus nomes pesquis\\xE1veis. Ferramentas como\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/danielstjules/buddy.js\"\n  }), \"buddy.js\"), \"\\xA0e\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/eslint/eslint/blob/660e0918933e6e7fede26bc675a0763a6b357c94/docs/rules/no-magic-numbers.md\"\n  }), \"ESLint\"), \"\\xA0podem ajudar a identificar constantes sem nome.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"// Para que diabos serve 86400000?\\nsetTimeout(blastOff, 86400000);\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"// Declare-as como `const` global em letras mai\\xFAsculas.\\nconst MILLISECONDS_IN_A_DAY = 86400000;\\n\\nsetTimeout(blastOff, MILLISECONDS_IN_A_DAY);\\n\\n\")), mdx(\"h3\", null, \"Use vari\\xE1veis explicativas\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const address = 'One Infinite Loop, Cupertino 95014';\\nconst cityZipCodeRegex = /^[^,\\\\\\\\]+[,\\\\\\\\\\\\s]+(.+?)\\\\s*(\\\\d{5})?$/;\\nsaveCityZipCode(address.match(cityZipCodeRegex)[1], address.match(cityZipCodeRegex)[2]);\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const address = 'One Infinite Loop, Cupertino 95014';\\nconst cityZipCodeRegex = /^[^,\\\\\\\\]+[,\\\\\\\\\\\\s]+(.+?)\\\\s*(\\\\d{5})?$/;\\nconst [, city, zipCode] = address.match(cityZipCodeRegex) || [];\\nsaveCityZipCode(city, zipCode);\\n\\n\")), mdx(\"h3\", null, \"Evite Mapeamento Mental\"), mdx(\"p\", null, \"Explicito \\xE9 melhor que impl\\xEDcito.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const locations = ['Austin', 'New York', 'San Francisco'];\\nlocations.forEach((l) => {\\n  doStuff();\\n  doSomeOtherStuff();\\n  // ...\\n  // ...\\n  // ...\\n  // Espera, para que serve o `l` mesmo?\\n  dispatch(l);\\n});\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const locations = ['Austin', 'New York', 'San Francisco'];\\nlocations.forEach((location) => {\\n  doStuff();\\n  doSomeOtherStuff();\\n  // ...\\n  // ...\\n  // ...\\n  dispatch(location);\\n});\\n\\n\")), mdx(\"h3\", null, \"N\\xE3o adicione contextos desnecess\\xE1rios\"), mdx(\"p\", null, \"Se o nome de sua classe/objeto j\\xE1 lhe diz alguma coisa, n\\xE3o as repita nos nomes de suas vari\\xE1veis.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const Car = {\\n  carMake: 'Honda',\\n  carModel: 'Accord',\\n  carColor: 'Blue'\\n};\\n\\nfunction paintCar(car) {\\n  car.carColor = 'Red';\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const Car = {\\n  make: 'Honda',\\n  model: 'Accord',\\n  color: 'Blue'\\n};\\n\\nfunction paintCar(car) {\\n  car.color = 'Red';\\n}\\n\\n\")), mdx(\"h3\", null, \"Use argumentos padr\\xF5es ao inv\\xE9s de curto circuitar ou usar condicionais\"), mdx(\"p\", null, \"Argumentos padr\\xF5es s\\xE3o geralmente mais limpos do que curto circuitos. Esteja ciente que se voc\\xEA us\\xE1-los, sua fun\\xE7\\xE3o apenas ir\\xE1 fornecer valores padr\\xF5es para argumentos\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \". Outros valores \\\"falsos\\\" como\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"''\"), \",\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"\\\"\"), \",\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \",\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \",\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \", e\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NaN\"), \", n\\xE3o ser\\xE3o substituidos por valores padr\\xF5es.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function createMicrobrewery(name) {\\n  const breweryName = name || 'Hipster Brew Co.';\\n  // ...\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function createMicrobrewery(breweryName = 'Hipster Brew Co.') {\\n  // ...\\n}\\n\\n\")), mdx(\"h2\", null, \"Fun\\xE7\\xF5es\"), mdx(\"h3\", null, \"Argumentos de fun\\xE7\\xF5es (idealmente 2 ou menos)\"), mdx(\"p\", null, \"Limitar a quantidade de par\\xE2metros de uma fun\\xE7\\xE3o \\xE9 incrivelmente importante porque torna mais f\\xE1cil test\\xE1-la. Ter mais que tr\\xEAs leva a uma explos\\xE3o combinat\\xF3ria onde voc\\xEA tem que testar muitos casos diferentes com cada argumento separadamente.\"), mdx(\"p\", null, \"Um ou dois argumentos \\xE9 o caso ideal, e tr\\xEAs devem ser evitados se poss\\xEDvel. Qualquer coisa a mais que isso deve ser consolidada. Geralmente, se voc\\xEA tem mais que dois argumentos ent\\xE3o sua fun\\xE7\\xE3o est\\xE1 tentando fazer muitas coisas. Nos casos em que n\\xE3o est\\xE1, na maioria das vezes um objeto \\xE9 suficiente como argumento.\"), mdx(\"p\", null, \"J\\xE1 que JavaScript lhe permite criar objetos instantaneamente, sem ter que escrever muita coisa, voc\\xEA pode usar um objeto se voc\\xEA se pegar precisando usar muitos argumentos.\"), mdx(\"p\", null, \"Para tornar mais \\xF3bvio quais as propriedades que as fun\\xE7\\xF5es esperam, voc\\xEA pode usar a sintaxe de desestrutura\\xE7\\xE3o (destructuring) do ES2015/ES6. Ela possui algumas vantagens:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Quando algu\\xE9m olha para a assinatura de uma fun\\xE7\\xE3o, fica imediatamente claro quais propriedades s\\xE3o usadas.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Desestrutura\\xE7\\xE3o tamb\\xE9m clona os valores primitivos espec\\xEDficos do objeto passado como argumento para a fun\\xE7\\xE3o. Isso pode ajudar a evitar efeitos colaterais. Nota: objetos e vetores que s\\xE3o desestruturados a partir do objeto passado por argumento N\\xC3O s\\xE3o clonados.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Linters podem te alertar sobre propriedades n\\xE3o utilizadas, o que seria imposs\\xEDvel sem usar desestrutura\\xE7\\xE3o.\")), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function createMenu(title, body, buttonText, cancellable) {\\n  // ...\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function createMenu({ title, body, buttonText, cancellable }) {\\n  // ...\\n}\\n\\ncreateMenu({\\n  title: 'Foo',\\n  body: 'Bar',\\n  buttonText: 'Baz',\\n  cancellable: true\\n});\\n\\n\")), mdx(\"h3\", null, \"Fun\\xE7\\xF5es devem fazer uma coisa\"), mdx(\"p\", null, \"Essa \\xE9 de longe a regra mais importante em engenharia de software. Quando fun\\xE7\\xF5es fazem mais que uma coisa, elas se tornam dif\\xEDceis de serem compostas, testadas e raciocinadas. Quando voc\\xEA pode isolar uma fun\\xE7\\xE3o para realizar apenas uma a\\xE7\\xE3o, elas podem ser refatoradas facilmente e seu c\\xF3digo ficar\\xE1 muito mais limpo. Se voc\\xEA n\\xE3o levar mais nada desse guia al\\xE9m disso, voc\\xEA j\\xE1 estar\\xE1 na frente de muitos desenvolvedores.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function emailClients(clients) {\\n  clients.forEach((client) => {\\n    const clientRecord = database.lookup(client);\\n    if (clientRecord.isActive()) {\\n      email(client);\\n    }\\n  });\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function emailActiveClients(clients) {\\n  clients\\n    .filter(isActiveClient)\\n    .forEach(email);\\n}\\n\\nfunction isActiveClient(client) {\\n  const clientRecord = database.lookup(client);\\n  return clientRecord.isActive();\\n}\\n\\n\")), mdx(\"h3\", null, \"Nomes de fun\\xE7\\xF5es devem dizer o que elas fazem\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function addToDate(date, month) {\\n  // ...\\n}\\n\\nconst date = new Date();\\n\\n// \\xC9 dif\\xEDcil dizer pelo nome da fun\\xE7\\xE3o o que \\xE9 adicionado\\naddToDate(date, 1);\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function addMonthToDate(month, date) {\\n  // ...\\n}\\n\\nconst date = new Date();\\naddMonthToDate(1, date);\\n\\n\")), mdx(\"h3\", null, \"Fun\\xE7\\xF5es devem ter apenas um n\\xEDvel de abstra\\xE7\\xE3o\"), mdx(\"p\", null, \"Quando voc\\xEA tem mais de um n\\xEDvel de abstra\\xE7\\xE3o sua fun\\xE7\\xE3o provavelmente esta fazendo coisas demais. Dividir suas fun\\xE7\\xF5es leva a reutiliza\\xE7\\xE3o e testes mais f\\xE1ceis.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function parseBetterJSAlternative(code) {\\n  const REGEXES = [\\n    // ...\\n  ];\\n\\n  const statements = code.split(' ');\\n  const tokens = [];\\n  REGEXES.forEach((REGEX) => {\\n    statements.forEach((statement) => {\\n      // ...\\n    });\\n  });\\n\\n  const ast = [];\\n  tokens.forEach((token) => {\\n    // lex...\\n  });\\n\\n  ast.forEach((node) => {\\n    // parse...\\n  });\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function tokenize(code) {\\n  const REGEXES = [\\n    // ...\\n  ];\\n\\n  const statements = code.split(' ');\\n  const tokens = [];\\n  REGEXES.forEach((REGEX) => {\\n    statements.forEach((statement) => {\\n      tokens.push( /* ... */ );\\n    });\\n  });\\n\\n  return tokens;\\n}\\n\\nfunction lexer(tokens) {\\n  const ast = [];\\n  tokens.forEach((token) => {\\n    ast.push( /* ... */ );\\n  });\\n\\n  return ast;\\n}\\n\\nfunction parseBetterJSAlternative(code) {\\n  const tokens = tokenize(code);\\n  const ast = lexer(tokens);\\n  ast.forEach((node) => {\\n    // parse...\\n  });\\n}\\n\\n\")), mdx(\"h3\", null, \"Remova c\\xF3digo duplicado\"), mdx(\"p\", null, \"Fa\\xE7a absolutamente seu melhor para evitar c\\xF3digo duplicado. C\\xF3digo duplicado quer dizer que existe mais de um lugar onde voc\\xEA dever\\xE1 alterar algo se precisar mudar alguma l\\xF3gica.\"), mdx(\"p\", null, \"Imagine que voc\\xEA \\xE9 dono de um restaurante e voc\\xEA toma conta do seu estoque: todos os seus tomates, cebolas, alhos, temperos, etc. Se voc\\xEA tem multiplas listas onde guarda estas informa\\xE7\\xF5es, ent\\xE3o voc\\xEA ter\\xE1 que atualizar todas elas quando servir um prato que tenha tomates. Se voc\\xEA tivesse apenas uma lista, teria apenas um lugar para atualizar!\"), mdx(\"p\", null, \"Frequentemente, voc\\xEA possui c\\xF3digo duplicado porque voc\\xEA tem duas ou mais\\\\\\ncoisas levemente diferentes, que possuem muito em comum, mas suas diferen\\xE7as lhe for\\xE7am a ter mais duas ou tr\\xEAs fun\\xE7\\xF5es que fazem muito das mesmas coisas. Remover c\\xF3digo duplicado significa criar uma abstra\\xE7\\xE3o que seja capaz de lidar com este conjunto de coisas diferentes com apenas uma fun\\xE7\\xE3o/m\\xF3dulo/classe.\"), mdx(\"p\", null, \"Conseguir a abstra\\xE7\\xE3o correta \\xE9 cr\\xEDtico, por isso que voc\\xEA deveria seguir os princ\\xEDpios SOLID descritos na se\\xE7\\xE3o\\xA0\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Classes\"), \". Abstra\\xE7\\xF5es ruins podem ser piores do que c\\xF3digo duplicado, ent\\xE3o tome cuidado! Dito isto, se voc\\xEA puder fazer uma boa abstra\\xE7\\xE3o, fa\\xE7a-a! N\\xE3o repita a si mesmo, caso contr\\xE1rio voc\\xEA se pegar\\xE1 atualizando muitos lugares toda vez que precisar mudar qualquer coisinha.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function showDeveloperList(developers) {\\n  developers.forEach((developer) => {\\n    const expectedSalary = developer.calculateExpectedSalary();\\n    const experience = developer.getExperience();\\n    const githubLink = developer.getGithubLink();\\n    const data = {\\n      expectedSalary,\\n      experience,\\n      githubLink\\n    };\\n\\n    render(data);\\n  });\\n}\\n\\nfunction showManagerList(managers) {\\n  managers.forEach((manager) => {\\n    const expectedSalary = manager.calculateExpectedSalary();\\n    const experience = manager.getExperience();\\n    const portfolio = manager.getMBAProjects();\\n    const data = {\\n      expectedSalary,\\n      experience,\\n      portfolio\\n    };\\n\\n    render(data);\\n  });\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function showEmployeeList(employees) {\\n  employees.forEach((employee) => {\\n    const expectedSalary = employee.calculateExpectedSalary();\\n    const experience = employee.getExperience();\\n\\n    const data = {\\n      expectedSalary,\\n      experience\\n    };\\n\\n    switch(employee.type){\\n      case 'manager':\\n        data.portfolio = employee.getMBAProjects();\\n        break;\\n      case 'developer':\\n        data.githubLink = employee.getGithubLink();\\n        break;\\n    }\\n\\n    render(data);\\n  });\\n}\\n\\n\")), mdx(\"h3\", null, \"Defina (set) objetos padr\\xF5es com Object.assign\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const menuConfig = {\\n  title: null,\\n  body: 'Bar',\\n  buttonText: null,\\n  cancellable: true\\n};\\n\\nfunction createMenu(config) {\\n  config.title = config.title || 'Foo';\\n  config.body = config.body || 'Bar';\\n  config.buttonText = config.buttonText || 'Baz';\\n  config.cancellable = config.cancellable !== undefined ? config.cancellable : true;\\n}\\n\\ncreateMenu(menuConfig);\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const menuConfig = {\\n  title: 'Order',\\n  // Usu\\xE1rio n\\xE3o incluiu a chave 'body'\\n  buttonText: 'Send',\\n  cancellable: true\\n};\\n\\nfunction createMenu(config) {\\n  config = Object.assign({\\n    title: 'Foo',\\n    body: 'Bar',\\n    buttonText: 'Baz',\\n    cancellable: true\\n  }, config);\\n\\n  // configura\\xE7\\xE3o agora \\xE9: {title: \\\"Order\\\", body: \\\"Bar\\\", buttonText: \\\"Send\\\", cancellable: true}\\n  // ...\\n}\\n\\ncreateMenu(menuConfig);\\n\\n\")), mdx(\"h3\", null, \"N\\xE3o use flags como par\\xE2metros de fun\\xE7\\xF5es\"), mdx(\"p\", null, \"Flags falam para o seu usu\\xE1rio que sua fun\\xE7\\xE3o faz mais de uma coisa. Fun\\xE7\\xF5es devem fazer apenas uma coisa. Divida suas fun\\xE7\\xF5es se elas est\\xE3o seguindo caminhos de c\\xF3digo diferentes baseadas em um valor boleano.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function createFile(name, temp) {\\n  if (temp) {\\n    fs.create(`./temp/${name}`);\\n  } else {\\n    fs.create(name);\\n  }\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function createFile(name) {\\n  fs.create(name);\\n}\\n\\nfunction createTempFile(name) {\\n  createFile(`./temp/${name}`);\\n}\\n\\n\")), mdx(\"h3\", null, \"Evite Efeitos Colaterais (parte 1)\"), mdx(\"p\", null, \"Uma fun\\xE7\\xE3o produz um efeito colateral se ela faz alguma coisa que n\\xE3o seja receber um valor de entrada e retornar outro(s) valor(es). Um efeito colateral pode ser escrever em um arquivo, modificar uma vari\\xE1vel global, ou acidentalmente transferir todo seu dinheiro para um estranho.\"), mdx(\"p\", null, \"Agora, voc\\xEA precisa de efeitos colaterais ocasionalmente no seu programa. Como no exemplo anterior, voc\\xEA pode precisar escrever em um arquivo. O que voc\\xEA quer fazer \\xE9 centralizar aonde est\\xE1 fazendo isto. N\\xE3o tenha diversas fun\\xE7\\xF5es e classes que escrevam para uma arquivo em particular. Tenha um servi\\xE7o que fa\\xE7a isso. Um e apenas um.\"), mdx(\"p\", null, \"O ponto principal \\xE9 evitar armadilhas como compartilhar o estado entre objetos sem nenhuma estrutura, usando tipos de dados mut\\xE1veis que podem ser escritos por qualquer coisa, e n\\xE3o centralizando onde seu efeito colateral acontece. Se voc\\xEA conseguir fazer isto, voc\\xEA ser\\xE1 muito mais feliz que a grande maioria dos outros programadores.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"// Vari\\xE1vel global referenciada pela fun\\xE7\\xE3o seguinte\\n// Se tiv\\xE9ssemos outra fun\\xE7\\xE3o que usa esse nome, ent\\xE3o seria um vetor (array) e poderia quebrar seu c\\xF3digo\\nlet name = 'Ryan McDermott';\\n\\nfunction splitIntoFirstAndLastName() {\\n  name = name.split(' ');\\n}\\n\\nsplitIntoFirstAndLastName();\\n\\nconsole.log(name); // ['Ryan', 'McDermott'];\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function splitIntoFirstAndLastName(name) {\\n  return name.split(' ');\\n}\\n\\nconst name = 'Ryan McDermott';\\nconst newName = splitIntoFirstAndLastName(name);\\n\\nconsole.log(name); // 'Ryan McDermott';\\nconsole.log(newName); // ['Ryan', 'McDermott'];\\n\\n\")), mdx(\"h3\", null, \"Evite Efeitos Colaterais (parte 2)\"), mdx(\"p\", null, \"Em JavaScript, tipos primitivos s\\xE3o passados por valor e objetos/vetores s\\xE3o passados por refer\\xEAncia. No caso de objetos e vetores, se sua fun\\xE7\\xE3o faz uma mudan\\xE7a em um vetor de um carrinho de compras, por exemplo, adicionando um item para ser comprado, ent\\xE3o qualquer outra fun\\xE7\\xE3o que use o vetor\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cart\"), \"\\xA0tamb\\xE9m ser\\xE1 afetada por essa adi\\xE7\\xE3o. Isso pode ser \\xF3timo, mas tamb\\xE9m pode ser ruim. Vamos imaginar uma situa\\xE7\\xE3o ruim:\"), mdx(\"p\", null, \"O usu\\xE1rio clica no bot\\xE3o \\\"Comprar\\\", bot\\xE3o que invoca a fun\\xE7\\xE3o\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"purchase\"), \"\\xA0que dispara uma s\\xE9rie de requisi\\xE7\\xF5es e manda o vetor\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cart\"), \"\\xA0para o servidor. Devido a uma conex\\xE3o ruim de internet, a fun\\xE7\\xE3o\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"purchase\"), \"\\xA0precisa fazer novamente a requisi\\xE7\\xE3o. Agora, imagine que nesse meio tempo o usu\\xE1rio acidentalmente clique no bot\\xE3o\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Adicionar ao carrinho\"), \"\\xA0em um produto que ele n\\xE3o queria antes da requisi\\xE7\\xE3o come\\xE7ar. Se isto acontecer e a requisi\\xE7\\xE3o for enviada novamente, ent\\xE3o a fun\\xE7\\xE3o\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"purchase\"), \"\\xA0ir\\xE1 enviar acidentalmente o vetor com o novo produto adicionado porque existe uma refer\\xEAncia para o vetor\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cart\"), \"\\xA0que a fun\\xE7\\xE3o\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addItemToCart\"), \"\\xA0modificou adicionando um produto indesejado.\"), mdx(\"p\", null, \"Uma \\xF3tima solu\\xE7\\xE3o seria que a fun\\xE7\\xE3o\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addCartToItem\"), \"\\xA0sempre clonasse o vetor\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cart\"), \", editasse-o, e ent\\xE3o retornasse seu clone. Isso garante que nenhuma outra fun\\xE7\\xE3o que possua uma refer\\xEAncia para o carrinho de compras seja afetada por qualquer mudan\\xE7a feita.\"), mdx(\"p\", null, \"Duas ressalvas desta abordagem:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Podem haver casos onde voc\\xEA realmente quer mudar o objeto de entrada, mas quando voc\\xEA adota este tipo de programa\\xE7\\xE3o, voc\\xEA vai descobrir que estes casos s\\xE3o bastante raros. A maioria das coisas podem ser refatoradas para n\\xE3o terem efeitos colaterais.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Clonar objetos grandes pode ser bastante caro em termos de desempenho. Com sorte, na pr\\xE1tica isso n\\xE3o \\xE9 um problema, porque existem\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/immutable-js/\"\n  }), \"\\xF3timas bibliotecas\"), \"\\xA0que permitem que este tipo de programa\\xE7\\xE3o seja r\\xE1pida e n\\xE3o seja t\\xE3o intensa no uso de mem\\xF3ria quanto seria se voc\\xEA clonasse manualmente objetos e vetores.\"))), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const addItemToCart = (cart, item) => {\\n  cart.push({ item, date: Date.now() });\\n};\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const addItemToCart = (cart, item) => {\\n  return [...cart, { item, date: Date.now() }];\\n};\\n\\n\")), mdx(\"h3\", null, \"N\\xE3o escreva em fun\\xE7\\xF5es globais\"), mdx(\"p\", null, \"Poluir globais \\xE9 uma pratica ruim em JavaScript porque voc\\xEA pode causar conflito com outra biblioteca e o usu\\xE1rio da sua API n\\xE3o faria a menor ideia at\\xE9 que ele tivesse um exce\\xE7\\xE3o sendo levantada em produ\\xE7\\xE3o. Vamos pensar em um exemplo: e se voc\\xEA quisesse estender o m\\xE9todo nativo Array do JavaScript para ter um m\\xE9todo\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"diff\"), \"\\xA0que poderia mostrar a diferen\\xE7a entre dois vetores? Voc\\xEA poderia escrever sua nova fun\\xE7\\xE3o em\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Array.prototype\"), \", mas poderia colidir com outra biblioteca que tentou fazer a mesma coisa. E se esta outra biblioteca estava apenas usando\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"diff\"), \"\\xA0para achar a diferen\\xE7a entre o primeiro e \\xFAltimo elemento de um vetor? \\xC9 por isso que seria muito melhor usar as classes padr\\xF5es do ES2015/ES6 e apenas estender o\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Array\"), \"\\xA0global.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Array.prototype.diff = function diff(comparisonArray) {\\n  const hash = new Set(comparisonArray);\\n  return this.filter(elem => !hash.has(elem));\\n};\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class SuperArray extends Array {\\n  diff(comparisonArray) {\\n    const hash = new Set(comparisonArray);\\n    return this.filter(elem => !hash.has(elem));\\n  }\\n}\\n\\n\")), mdx(\"h3\", null, \"Favore\\xE7a programa\\xE7\\xE3o funcional sobre programa\\xE7\\xE3o imperativa\"), mdx(\"p\", null, \"JavaScript n\\xE3o \\xE9 uma linguagem funcional da mesma forma que Haskell \\xE9, mas tem um toque de funcional em si. Linguagens funcionais s\\xE3o mais limpas e f\\xE1ceis de se testar. Favore\\xE7a esse tipo de programa\\xE7\\xE3o quando puder.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const programmerOutput = [\\n  {\\n    name: 'Uncle Bobby',\\n    linesOfCode: 500\\n  }, {\\n    name: 'Suzie Q',\\n    linesOfCode: 1500\\n  }, {\\n    name: 'Jimmy Gosling',\\n    linesOfCode: 150\\n  }, {\\n    name: 'Gracie Hopper',\\n    linesOfCode: 1000\\n  }\\n];\\n\\nlet totalOutput = 0;\\n\\nfor (let i = 0; i < programmerOutput.length; i++) {\\n  totalOutput += programmerOutput[i].linesOfCode;\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const programmerOutput = [\\n  {\\n    name: 'Uncle Bobby',\\n    linesOfCode: 500\\n  }, {\\n    name: 'Suzie Q',\\n    linesOfCode: 1500\\n  }, {\\n    name: 'Jimmy Gosling',\\n    linesOfCode: 150\\n  }, {\\n    name: 'Gracie Hopper',\\n    linesOfCode: 1000\\n  }\\n];\\n\\nconst INITIAL_VALUE = 0;\\n\\nconst totalOutput = programmerOutput\\n  .map((programmer) => programmer.linesOfCode)\\n  .reduce((acc, linesOfCode) => acc + linesOfCode, INITIAL_VALUE);\\n\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#%C3%8Dndice\"\n  }), \"\\u2B06 volta ao topo\")), mdx(\"h3\", null, \"Encapsule condicionais\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"if (fsm.state === 'fetching' && isEmpty(listNode)) {\\n  // ...\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function shouldShowSpinner(fsm, listNode) {\\n  return fsm.state === 'fetching' && isEmpty(listNode);\\n}\\n\\nif (shouldShowSpinner(fsmInstance, listNodeInstance)) {\\n  // ...\\n}\\n\\n\")), mdx(\"h3\", null, \"Evite nega\\xE7\\xF5es de condicionais\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function isDOMNodeNotPresent(node) {\\n  // ...\\n}\\n\\nif (!isDOMNodeNotPresent(node)) {\\n  // ...\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function isDOMNodePresent(node) {\\n  // ...\\n}\\n\\nif (isDOMNodePresent(node)) {\\n  // ...\\n}\\n\\n\")), mdx(\"h3\", null, \"Evite condicionais\"), mdx(\"p\", null, \"Esta parece ser uma tarefa imposs\\xEDvel. Da primeira vez que as pessoas escutam isso, a maioria diz, \\\"como eu supostamente faria alguma coisa sem usar\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \"? \\\" A resposta \\xE9 que voc\\xEA pode usar polimorfismo para realizar a mesma tarefa em diversos casos. A segunda quest\\xE3o \\xE9 geralmente, \\\"bom, isso \\xE9 \\xF3timo, mas porque eu deveria fazer isso?\\\" A resposta \\xE9 um conceito de c\\xF3digo limpo aprendido previamente: uma fun\\xE7\\xE3o deve fazer apenas uma coisa. Quando voc\\xEA tem classes e fun\\xE7\\xF5es que tem declara\\xE7\\xF5es\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \", voc\\xEA esta dizendo para seu usu\\xE1rio que sua fun\\xE7\\xE3o faz mais de uma coisa. Relembre-se, apenas uma coisa.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class Airplane {\\n  // ...\\n  getCruisingAltitude() {\\n    switch (this.type) {\\n      case '777':\\n        return this.getMaxAltitude() - this.getPassengerCount();\\n      case 'Air Force One':\\n        return this.getMaxAltitude();\\n      case 'Cessna':\\n        return this.getMaxAltitude() - this.getFuelExpenditure();\\n    }\\n  }\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class Airplane {\\n  // ...\\n}\\n\\nclass Boeing777 extends Airplane {\\n  // ...\\n  getCruisingAltitude() {\\n    return this.getMaxAltitude() - this.getPassengerCount();\\n  }\\n}\\n\\nclass AirForceOne extends Airplane {\\n  // ...\\n  getCruisingAltitude() {\\n    return this.getMaxAltitude();\\n  }\\n}\\n\\nclass Cessna extends Airplane {\\n  // ...\\n  getCruisingAltitude() {\\n    return this.getMaxAltitude() - this.getFuelExpenditure();\\n  }\\n}\\n\\n\")), mdx(\"h3\", null, \"Evite checagem de tipos (parte 1)\"), mdx(\"p\", null, \"JavaScript n\\xE3o possui tipos, o que significa que suas fun\\xE7\\xF5es podem receber qualquer tipo de argumento. Algumas vezes esta liberdade pode te morder, e se torna tentador fazer checagem de tipos em suas fun\\xE7\\xF5es. Existem muitas formas de evitar ter que fazer isso. A primeira coisa a se considerar s\\xE3o APIs consistentes.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function travelToTexas(vehicle) {\\n  if (vehicle instanceof Bicycle) {\\n    vehicle.pedal(this.currentLocation, new Location('texas'));\\n  } else if (vehicle instanceof Car) {\\n    vehicle.drive(this.currentLocation, new Location('texas'));\\n  }\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function travelToTexas(vehicle) {\\n  vehicle.move(this.currentLocation, new Location('texas'));\\n}\\n\\n\")), mdx(\"h3\", null, \"Evite checagem de tipos (parte 2)\"), mdx(\"p\", null, \"Se voc\\xEA estiver trabalhando com valores primitivos b\\xE1sicos como strings e inteiros, e voc\\xEA n\\xE3o pode usar polimorfismo, mas ainda sente a necessidade de checar o tipo, voc\\xEA deveria considerar usar TypeScript. \\xC9 uma excelente alternativa para o JavaScript normal, j\\xE1 que fornece uma tipagem est\\xE1tica sobre a sintaxe padr\\xE3o do JavaScript. O problema com checagem manual em JavaScript \\xE9 que para se fazer bem feito requer tanta verborragia extra que a falsa \\\"tipagem-segura\\\" que voc\\xEA consegue n\\xE3o compensa pela perca de legibilidade. Mantenha seu JavaScript limpo, escreve bons testes, e tenha boas revis\\xF5es de c\\xF3digo. Ou, de outra forma, fa\\xE7a tudo isso mas com TypeScript (que, como eu falei, \\xE9 uma \\xF3tima alternativa!).\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function combine(val1, val2) {\\n  if (typeof val1 === 'number' && typeof val2 === 'number' ||\\n      typeof val1 === 'string' && typeof val2 === 'string') {\\n    return val1 + val2;\\n  }\\n\\n  throw new Error('Must be of type String or Number');\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function combine(val1, val2) {\\n  return val1 + val2;\\n}\\n\\n\")), mdx(\"h3\", null, \"N\\xE3o otimize demais\"), mdx(\"p\", null, \"Navegadores modernos fazem muitas otimiza\\xE7\\xF5es por debaixo dos panos em tempo de execu\\xE7\\xE3o. Muitas vezes, se voc\\xEA estiver otimizando, est\\xE1 apenas perdendo o seu tempo.\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/petkaantonov/bluebird/wiki/Optimization-killers\"\n  }), \"Existem bons recursos\"), \"\\xA0para se verificar onde falta otimiza\\xE7\\xE3o. Foque nesses por enquanto, at\\xE9 que eles sejam consertados caso seja poss\\xEDvel.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"\\n// Em navegadores antigos, cada itera\\xE7\\xE3o de `list.length` n\\xE3o cacheada seria custosa\\n// devido a recomputa\\xE7\\xE3o de `list.length`. Em navegadores modernos, isto \\xE9 otimizado.\\nfor (let i = 0, len = list.length; i < len; i++) {\\n  // ...\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"for (let i = 0; i < list.length; i++) {\\n  // ...\\n}\\n\\n\")), mdx(\"h3\", null, \"Remova c\\xF3digo morto\"), mdx(\"p\", null, \"C\\xF3digo morto \\xE9 t\\xE3o ruim quanto c\\xF3digo duplicado. N\\xE3o existe nenhum motivo para deix\\xE1-lo em seu c\\xF3digo. Se ele n\\xE3o estiver sendo chamado, livre-se dele. Ele ainda estar\\xE1 a salvo no seu hist\\xF3rico de versionamento se ainda precisar dele.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function oldRequestModule(url) {\\n  // ...\\n}\\n\\nfunction newRequestModule(url) {\\n  // ...\\n}\\n\\nconst req = newRequestModule;\\ninventoryTracker('apples', req, 'www.inventory-awesome.io');\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function newRequestModule(url) {\\n  // ...\\n}\\n\\nconst req = newRequestModule;\\ninventoryTracker('apples', req, 'www.inventory-awesome.io');\\n\\n\")), mdx(\"h2\", null, \"Objetos e Estruturas de Dados\"), mdx(\"h3\", null, \"Use getters e setters\"), mdx(\"p\", null, \"Usar getters e setters para acessar dados em objetos \\xE9 bem melhor que simplesmente procurar por uma propriedade em um objeto. \\\"Por qu\\xEA?\\\", voc\\xEA deve perguntar. Bem, aqui vai uma lista desorganizada de motivos:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Quando voc\\xEA quer fazer mais al\\xE9m de pegar (get) a propriedade de um objeto, voc\\xEA n\\xE3o tem que procurar e mudar todos os acessores do seu c\\xF3digo;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Torna mais f\\xE1cil fazer valida\\xE7\\xE3o quando estiver dando um\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"set\"), \";\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Encapsula a representa\\xE7\\xE3o interna;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mais f\\xE1cil de adicionar logs e tratamento de erros quando dando get and set;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Voc\\xEA pode usar lazy loading nas propriedades de seu objeto, digamos, por exemplo, pegando ele de um servidor.\")), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function makeBankAccount() {\\n  // ...\\n\\n  return {\\n    balance: 0,\\n    // ...\\n  };\\n}\\n\\nconst account = makeBankAccount();\\naccount.balance = 100;\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function makeBankAccount() {\\n  // este \\xE9 privado\\n  let balance = 0;\\n\\n  // um \\\"getter\\\", feito p\\xFAblico atrav\\xE9s do objeto retornado abaixo\\n  function getBalance() {\\n    return balance;\\n  }\\n\\n  // um \\\"setter\\\", feito p\\xFAblico atrav\\xE9s do objeto retornado abaixo\\n  function setBalance(amount) {\\n    // ... validate before updating the balance\\n    balance = amount;\\n  }\\n\\n  return {\\n    // ...\\n    getBalance,\\n    setBalance,\\n  };\\n}\\n\\nconst account = makeBankAccount();\\naccount.setBalance(100);\\n\\n\")), mdx(\"h3\", null, \"Fa\\xE7a objetos terem membros privados\"), mdx(\"p\", null, \"Isto pode ser alcan\\xE7ado atrav\\xE9s de closures (para ES5 e al\\xE9m).\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"\\nconst Employee = function(name) {\\n  this.name = name;\\n};\\n\\nEmployee.prototype.getName = function getName() {\\n  return this.name;\\n};\\n\\nconst employee = new Employee('John Doe');\\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe\\ndelete employee.name;\\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: undefined\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function makeEmployee(name) {\\n  return {\\n    getName() {\\n      return name;\\n    },\\n  };\\n}\\n\\nconst employee = makeEmployee('John Doe');\\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe\\ndelete employee.name;\\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe\\n\\n\")), mdx(\"h2\", null, \"Classes\"), mdx(\"h3\", null, \"Prefira classes do ES2015/ES6 ao inv\\xE9s de fun\\xE7\\xF5es simples do ES5\"), mdx(\"p\", null, \"\\xC9 muito dif\\xEDcil conseguir que heran\\xE7a de classe, construtores, e defini\\xE7\\xF5es de m\\xE9todos sejam leg\\xEDveis para classes de ES5 cl\\xE1ssicas. Se voc\\xEA precisa de heran\\xE7a (e esteja ciente que voc\\xEA talvez n\\xE3o precise), ent\\xE3o prefira classes ES2015/ES6. Entretanto, prefira fun\\xE7\\xF5es pequenas ao inv\\xE9s de classes at\\xE9 que voc\\xEA precise de objetos maiores e mais complexos.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const Animal = function(age) {\\n  if (!(this instanceof Animal)) {\\n    throw new Error('Instantiate Animal with `new`');\\n  }\\n\\n  this.age = age;\\n};\\n\\nAnimal.prototype.move = function move() {};\\n\\nconst Mammal = function(age, furColor) {\\n  if (!(this instanceof Mammal)) {\\n    throw new Error('Instantiate Mammal with `new`');\\n  }\\n\\n  Animal.call(this, age);\\n  this.furColor = furColor;\\n};\\n\\nMammal.prototype = Object.create(Animal.prototype);\\nMammal.prototype.constructor = Mammal;\\nMammal.prototype.liveBirth = function liveBirth() {};\\n\\nconst Human = function(age, furColor, languageSpoken) {\\n  if (!(this instanceof Human)) {\\n    throw new Error('Instantiate Human with `new`');\\n  }\\n\\n  Mammal.call(this, age, furColor);\\n  this.languageSpoken = languageSpoken;\\n};\\n\\nHuman.prototype = Object.create(Mammal.prototype);\\nHuman.prototype.constructor = Human;\\nHuman.prototype.speak = function speak() {};\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class Animal {\\n  constructor(age) {\\n    this.age = age;\\n  }\\n\\n  move() { /* ... */ }\\n}\\n\\nclass Mammal extends Animal {\\n  constructor(age, furColor) {\\n    super(age);\\n    this.furColor = furColor;\\n  }\\n\\n  liveBirth() { /* ... */ }\\n}\\n\\nclass Human extends Mammal {\\n  constructor(age, furColor, languageSpoken) {\\n    super(age, furColor);\\n    this.languageSpoken = languageSpoken;\\n  }\\n\\n  speak() { /* ... */ }\\n}\\n\\n\")), mdx(\"h3\", null, \"Use encadeamento de m\\xE9todos\"), mdx(\"p\", null, \"Este padr\\xE3o \\xE9 muito \\xFAtil em JavaScript e voc\\xEA o ver\\xE1 em muitas bibliotecas como jQuery e Lodash. Ele permite que seu c\\xF3digo seja expressivo e menos verboso. Por esse motivo, eu digo, use encadeamento de m\\xE9todos e d\\xEA uma olhada em como o seu c\\xF3digo ficar\\xE1 mais limpo. Em suas fun\\xE7\\xF5es de classes, apenas retorne\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \"\\xA0no final de cada fun\\xE7\\xE3o, e voc\\xEA poder\\xE1 encadear mais m\\xE9todos de classe nele.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class Car {\\n  constructor(make, model, color) {\\n    this.make = make;\\n    this.model = model;\\n    this.color = color;\\n  }\\n\\n  setMake(make) {\\n    this.make = make;\\n  }\\n\\n  setModel(model) {\\n    this.model = model;\\n  }\\n\\n  setColor(color) {\\n    this.color = color;\\n  }\\n\\n  save() {\\n    console.log(this.make, this.model, this.color);\\n  }\\n}\\n\\nconst car = new Car('Ford','F-150','red');\\ncar.setColor('pink');\\ncar.save();\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class Car {\\n  constructor(make, model, color) {\\n    this.make = make;\\n    this.model = model;\\n    this.color = color;\\n  }\\n\\n  setMake(make) {\\n    this.make = make;\\n    // NOTA: Retorne this para encadear\\n    return this;\\n  }\\n\\n  setModel(model) {\\n    this.model = model;\\n    // NOTA: Retorne this para encadear\\n    return this;\\n  }\\n\\n  setColor(color) {\\n    this.color = color;\\n    // NOTA: Retorne this para encadear\\n    return this;\\n  }\\n\\n  save() {\\n    console.log(this.make, this.model, this.color);\\n    // NOTA: Retorne this para encadear\\n    return this;\\n  }\\n}\\n\\nconst car = new Car('Ford','F-150','red')\\n  .setColor('pink')\\n  .save();\\n\\n\")), mdx(\"h3\", null, \"Prefira composi\\xE7\\xE3o ao inv\\xE9s de heran\\xE7a\"), mdx(\"p\", null, \"Como dito famosamente em\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pt.wikipedia.org/wiki/Padr%C3%A3o_de_projeto_de_software\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Padr\\xE3o de projeto\")), \"\\xA0pela Gangue dos Quatro, voc\\xEA deve preferir composi\\xE7\\xE3o sobre heran\\xE7a onde voc\\xEA puder. Existem muitas boas raz\\xF5es para usar heran\\xE7a e muitas boas raz\\xF5es para se usar composi\\xE7\\xE3o. O ponto principal para essa m\\xE1xima \\xE9 que se sua mente for instintivamente para a heran\\xE7a, tente pensar se composi\\xE7\\xE3o poderia modelar melhor o seu problema. Em alguns casos pode.\"), mdx(\"p\", null, \"Voc\\xEA deve estar pensando ent\\xE3o, \\\"quando eu deveria usar heran\\xE7a?\\\" Isso depende especificamente do seu problema, mas essa \\xE9 uma lista decente de quando heran\\xE7a faz mais sentido que composi\\xE7\\xE3o:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Sua heran\\xE7a representa uma rela\\xE7\\xE3o de \\\"isto-\\xE9\\\" e n\\xE3o uma rela\\xE7\\xE3o de \\\"isto-tem\\\" (Human\\u2192Animal vs. User->UserDetails)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA pode reutilizar c\\xF3digo de classes de base (Humanos podem se mover como todos os animais).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA quer fazer mudan\\xE7as globais para classes derivadas mudando apenas a classe base. (Mudar o custo cal\\xF3rico para todos os animais quando se movem).\")), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class Employee {\\n  constructor(name, email) {\\n    this.name = name;\\n    this.email = email;\\n  }\\n\\n  // ...\\n}\\n\\n// Ruim porque Employees (Empregados) \\\"tem\\\" dados de impostos. EmployeeTaxData n\\xE3o \\xE9 um tipo de Employee\\nclass EmployeeTaxData extends Employee {\\n  constructor(ssn, salary) {\\n    super();\\n    this.ssn = ssn;\\n    this.salary = salary;\\n  }\\n\\n  // ...\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class EmployeeTaxData {\\n  constructor(ssn, salary) {\\n    this.ssn = ssn;\\n    this.salary = salary;\\n  }\\n\\n  // ...\\n}\\n\\nclass Employee {\\n  constructor(name, email) {\\n    this.name = name;\\n    this.email = email;\\n  }\\n\\n  setTaxData(ssn, salary) {\\n    this.taxData = new EmployeeTaxData(ssn, salary);\\n  }\\n  // ...\\n}\\n\\n\")), mdx(\"h2\", null, \"SOLID\"), mdx(\"h3\", null, \"Princ\\xEDpio da Responsabilidade \\xDAnica (SRP)\"), mdx(\"p\", null, \"Como dito em C\\xF3digo Limpo, \\\"Nunca deveria haver mais de um motivo para uma classe ter que mudar\\\". \\xC9 tentador empacotar uma classe em excesso com muitas funcionalidades, como quando voc\\xEA pode levar apenas uma mala em seu voo. O problema com isso \\xE9 que sua classe n\\xE3o ser\\xE1 conceitualmente coesa e dar-lhe-\\xE1 diversos motivos para mud\\xE1-la. Minimizar o n\\xFAmero de vezes que voc\\xEA precisa mudar uma classe \\xE9 importante, porque, se muitas funcionalidades est\\xE3o em uma classe e voc\\xEA mudar uma por\\xE7\\xE3o dela, pode ser dif\\xEDcil entender como isto afetar\\xE1 outras m\\xF3dulos que dependem dela no seu c\\xF3digo.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class UserSettings {\\n  constructor(user) {\\n    this.user = user;\\n  }\\n\\n  changeSettings(settings) {\\n    if (this.verifyCredentials()) {\\n      // ...\\n    }\\n  }\\n\\n  verifyCredentials() {\\n    // ...\\n  }\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class UserAuth {\\n  constructor(user) {\\n    this.user = user;\\n  }\\n\\n  verifyCredentials() {\\n    // ...\\n  }\\n}\\n\\nclass UserSettings {\\n  constructor(user) {\\n    this.user = user;\\n    this.auth = new UserAuth(user);\\n  }\\n\\n  changeSettings(settings) {\\n    if (this.auth.verifyCredentials()) {\\n      // ...\\n    }\\n  }\\n}\\n\\n\")), mdx(\"h3\", null, \"Princ\\xEDpio do Aberto/Fechado (OCP)\"), mdx(\"p\", null, \"Como foi dito por Bertrand Meyer, \\\"entidades de software (classes, m\\xF3dulos, fun\\xE7\\xF5es, etc.) devem se manter abertas para extens\\xF5es, mas fechadas para modifica\\xE7\\xF5es.\\\" Mas o que isso significa? Esse princ\\xEDpio basicamente diz que voc\\xEA deve permitir que usu\\xE1rios adicionem novas funcionalidades sem mudar c\\xF3digo j\\xE1 existente.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class AjaxAdapter extends Adapter {\\n  constructor() {\\n    super();\\n    this.name = 'ajaxAdapter';\\n  }\\n}\\n\\nclass NodeAdapter extends Adapter {\\n  constructor() {\\n    super();\\n    this.name = 'nodeAdapter';\\n  }\\n}\\n\\nclass HttpRequester {\\n  constructor(adapter) {\\n    this.adapter = adapter;\\n  }\\n\\n  fetch(url) {\\n    if (this.adapter.name === 'ajaxAdapter') {\\n      return makeAjaxCall(url).then((response) => {\\n        // transforma a resposta e retorna\\n      });\\n    } else if (this.adapter.name === 'httpNodeAdapter') {\\n      return makeHttpCall(url).then((response) => {\\n        // transforma a resposta e retorna\\n      });\\n    }\\n  }\\n}\\n\\nfunction makeAjaxCall(url) {\\n  // faz a request e retorna a promessa\\n}\\n\\nfunction makeHttpCall(url) {\\n  // faz a request e retorna a promessa\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class AjaxAdapter extends Adapter {\\n  constructor() {\\n    super();\\n    this.name = 'ajaxAdapter';\\n  }\\n\\n  request(url) {\\n    // faz a request e retorna a promessa\\n  }\\n}\\n\\nclass NodeAdapter extends Adapter {\\n  constructor() {\\n    super();\\n    this.name = 'nodeAdapter';\\n  }\\n\\n  request(url) {\\n    // faz a request e retorna a promessa\\n  }\\n}\\n\\nclass HttpRequester {\\n  constructor(adapter) {\\n    this.adapter = adapter;\\n  }\\n\\n  fetch(url) {\\n    return this.adapter.request(url).then((response) => {\\n      // transforma a resposta e retorna\\n    });\\n  }\\n}\\n\\n\")), mdx(\"h3\", null, \"Princ\\xEDpio de Substitui\\xE7\\xE3o de Liskov (LSP)\"), mdx(\"p\", null, \"Esse \\xE9 um termo assustador para um conceito extremamente simples. \\xC9 formalmente definido como \\\"Se S \\xE9 um subtipo de T, ent\\xE3o objetos do tipo T podem ser substitu\\xEDdos por objetos com o tipo S (i.e., objetos do tipo S podem substituir objetos do tipo T) sem alterar nenhuma das propriedades desej\\xE1veis de um programa (corretude, desempenho em tarefas, etc.).\\\" Esta \\xE9 uma defini\\xE7\\xE3o ainda mais assustadora.\"), mdx(\"p\", null, \"A melhor explica\\xE7\\xE3o para este conceito \\xE9 se voc\\xEA tiver uma classe pai e uma classe filha, ent\\xE3o a classe base e a classe filha pode ser usadas indistintamente sem ter resultados incorretos. Isso ainda pode ser confuso, ent\\xE3o vamos dar uma olhada no exemplo cl\\xE1ssico do Quadrado-Ret\\xE2ngulo (Square-Rectangle). Matematicamente, um quadrado \\xE9 um ret\\xE2ngulo, mas se voc\\xEA model\\xE1-lo usando uma rela\\xE7\\xE3o \\\"isto-\\xE9\\\" atrav\\xE9s de heran\\xE7a, voc\\xEA rapidamente ter\\xE1 problemas.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class Rectangle {\\n  constructor() {\\n    this.width = 0;\\n    this.height = 0;\\n  }\\n\\n  setColor(color) {\\n    // ...\\n  }\\n\\n  render(area) {\\n    // ...\\n  }\\n\\n  setWidth(width) {\\n    this.width = width;\\n  }\\n\\n  setHeight(height) {\\n    this.height = height;\\n  }\\n\\n  getArea() {\\n    return this.width * this.height;\\n  }\\n}\\n\\nclass Square extends Rectangle {\\n  setWidth(width) {\\n    this.width = width;\\n    this.height = width;\\n  }\\n\\n  setHeight(height) {\\n    this.width = height;\\n    this.height = height;\\n  }\\n}\\n\\nfunction renderLargeRectangles(rectangles) {\\n  rectangles.forEach((rectangle) => {\\n    rectangle.setWidth(4);\\n    rectangle.setHeight(5);\\n    const area = rectangle.getArea(); // RUIM: Retorna 25 para o Quadrado. Deveria ser 20.\\n    rectangle.render(area);\\n  });\\n}\\n\\nconst rectangles = [new Rectangle(), new Rectangle(), new Square()];\\nrenderLargeRectangles(rectangles);\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class Shape {\\n  setColor(color) {\\n    // ...\\n  }\\n\\n  render(area) {\\n    // ...\\n  }\\n}\\n\\nclass Rectangle extends Shape {\\n  constructor(width, height) {\\n    super();\\n    this.width = width;\\n    this.height = height;\\n  }\\n\\n  getArea() {\\n    return this.width * this.height;\\n  }\\n}\\n\\nclass Square extends Shape {\\n  constructor(length) {\\n    super();\\n    this.length = length;\\n  }\\n\\n  getArea() {\\n    return this.length * this.length;\\n  }\\n}\\n\\nfunction renderLargeShapes(shapes) {\\n  shapes.forEach((shape) => {\\n    const area = shape.getArea();\\n    shape.render(area);\\n  });\\n}\\n\\nconst shapes = [new Rectangle(4, 5), new Rectangle(4, 5), new Square(5)];\\nrenderLargeShapes(shapes);\\n\\n\")), mdx(\"h3\", null, \"Princ\\xEDpio da Segrega\\xE7\\xE3o de Interface (ISP)\"), mdx(\"p\", null, \"JavaScript n\\xE3o possui interfaces ent\\xE3o esse princ\\xEDpio n\\xE3o se aplica estritamente como os outros. Entretanto, \\xE9 importante e relevante at\\xE9 mesmo com a falta de um sistema de tipos em JavaScript.\"), mdx(\"p\", null, \"ISP diz que \\\"Clientes n\\xE3o devem ser forcados a depender de interfaces que eles n\\xE3o usam.\\\" Interfaces s\\xE3o contratos impl\\xEDcitos em JavaScript devido a sua tipagem pato (duck typing).\"), mdx(\"p\", null, \"Um bom exemplo para se observar que demonstra esse princ\\xEDpio em JavaScript \\xE9 de classes que requerem objetos de configura\\xE7\\xF5es grandes. N\\xE3o pedir para clientes definirem grandes quantidades de op\\xE7\\xF5es \\xE9 ben\\xE9fico, porque na maioria das vezes eles n\\xE3o precisar\\xE3o de todas as configura\\xE7\\xF5es. Torn\\xE1-las opcionais ajuda a prevenir uma \\\"interfer\\xEAncia gorda\\\".\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class DOMTraverser {\\n  constructor(settings) {\\n    this.settings = settings;\\n    this.setup();\\n  }\\n\\n  setup() {\\n    this.rootNode = this.settings.rootNode;\\n    this.animationModule.setup();\\n  }\\n\\n  traverse() {\\n    // ...\\n  }\\n}\\n\\nconst $ = new DOMTraverser({\\n  rootNode: document.getElementsByTagName('body'),\\n  animationModule() {} //  Na maioria das vezes, n\\xE3o precisamos animar enquanto atravessamos (traversing).\\n  // ...\\n});\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class DOMTraverser {\\n  constructor(settings) {\\n    this.settings = settings;\\n    this.options = settings.options;\\n    this.setup();\\n  }\\n\\n  setup() {\\n    this.rootNode = this.settings.rootNode;\\n    this.setupOptions();\\n  }\\n\\n  setupOptions() {\\n    if (this.options.animationModule) {\\n      // ...\\n    }\\n  }\\n\\n  traverse() {\\n    // ...\\n  }\\n}\\n\\nconst $ = new DOMTraverser({\\n  rootNode: document.getElementsByTagName('body'),\\n  options: {\\n    animationModule() {}\\n  }\\n});\\n\\n\")), mdx(\"h3\", null, \"Princ\\xEDpio da Invers\\xE3o de Depend\\xEAncia (DIP)\"), mdx(\"p\", null, \"Este princ\\xEDpio nos diz duas coisas essenciais:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"M\\xF3dulos de alto n\\xEDvel n\\xE3o devem depender de m\\xF3dulos de baixo n\\xEDvel. Ambos devem depender de abstra\\xE7\\xF5es.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Abstra\\xE7\\xF5es n\\xE3o devem depender de detalhes. Detalhes devem depender de abstra\\xE7\\xF5es.\")), mdx(\"p\", null, \"Isso pode ser dif\\xEDcil de entender a princ\\xEDpio, mas se voc\\xEA j\\xE1 trabalhou com AngularJS, voc\\xEA j\\xE1 viu uma implementa\\xE7\\xE3o deste princ\\xEDpio na forma de inje\\xE7\\xE3o de depend\\xEAncia (DI). Apesar de n\\xE3o serem conceitos id\\xEAnticos, DIP n\\xE3o deixa m\\xF3dulos de alto n\\xEDvel saber os detalhes de seus m\\xF3dulos de baixo n\\xEDvel, assim como configur\\xE1-los. Isso pode ser alcan\\xE7ado atrav\\xE9s de DI. Um grande beneficio \\xE9 que reduz o acoplamento entre os m\\xF3dulos. Acoplamento \\xE9 um padr\\xE3o de desenvolvimento muito ruim porque torna seu c\\xF3digo mais dif\\xEDcil de ser refatorado.\"), mdx(\"p\", null, \"Como dito anteriormente, JavaScript n\\xE3o possui interfaces, ent\\xE3o as abstra\\xE7\\xF5es que s\\xE3o necess\\xE1rias s\\xE3o contratos impl\\xEDcitos. Que quer dizer que, os m\\xE9todos e as classes que um objeto/classe exp\\xF5e para outros objeto/classe. No exemplo abaixo, o contrato impl\\xEDcito \\xE9 que qualquer m\\xF3dulo de Request para\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InventoryTracker\"), \"\\xA0ter\\xE1 um m\\xE9todo\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"requestItems\"), \":\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class InventoryRequester {\\n  constructor() {\\n    this.REQ_METHODS = ['HTTP'];\\n  }\\n\\n  requestItem(item) {\\n    // ...\\n  }\\n}\\n\\nclass InventoryTracker {\\n  constructor(items) {\\n    this.items = items;\\n\\n    // Ruim: N\\xF3s criamos uma depend\\xEAncia numa implementa\\xE7\\xE3o de request especifica.\\n    // N\\xF3s deveriamos apenas ter requestItems dependendo de um m\\xE9todo de request: `request`\\n    this.requester = new InventoryRequester();\\n  }\\n\\n  requestItems() {\\n    this.items.forEach((item) => {\\n      this.requester.requestItem(item);\\n    });\\n  }\\n}\\n\\nconst inventoryTracker = new InventoryTracker(['apples', 'bananas']);\\ninventoryTracker.requestItems();\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class InventoryTracker {\\n  constructor(items, requester) {\\n    this.items = items;\\n    this.requester = requester;\\n  }\\n\\n  requestItems() {\\n    this.items.forEach((item) => {\\n      this.requester.requestItem(item);\\n    });\\n  }\\n}\\n\\nclass InventoryRequesterV1 {\\n  constructor() {\\n    this.REQ_METHODS = ['HTTP'];\\n  }\\n\\n  requestItem(item) {\\n    // ...\\n  }\\n}\\n\\nclass InventoryRequesterV2 {\\n  constructor() {\\n    this.REQ_METHODS = ['WS'];\\n  }\\n\\n  requestItem(item) {\\n    // ...\\n  }\\n}\\n\\n// Construindo nossas depend\\xEAncias externamente e injetando-as, podemos facilmente\\n// substituir nosso m\\xF3dulo de request por um novo mais chique que usa WebSockets\\nconst inventoryTracker = new InventoryTracker(['apples', 'bananas'], new InventoryRequesterV2());\\ninventoryTracker.requestItems();\\n\\n\")), mdx(\"h2\", null, \"Testes\"), mdx(\"p\", null, \"Testes s\\xE3o mais importantes que entregas. Se voc\\xEA n\\xE3o possui testes ou um quantidade inadequada, ent\\xE3o toda vez que voc\\xEA entregar seu c\\xF3digo voc\\xEA n\\xE3o ter\\xE1 certeza se voc\\xEA n\\xE3o quebrou alguma coisa. Decidir o que constitui uma quantidade adequada \\xE9 responsabilidade do seu time, mas ter 100% de cobertura (todas as senten\\xE7as e branches) \\xE9 a maneira que se alcan\\xE7a uma alta confian\\xE7a e uma paz de espirito em desenvolvimento. Isso quer dizer que al\\xE9m de ter um \\xF3timo framework de testes, voc\\xEA tamb\\xE9m precisa usar uma\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://gotwarlost.github.io/istanbul/\"\n  }), \"boa ferramenta de cobertura\"), \".\"), mdx(\"p\", null, \"N\\xE3o existe desculpa para n\\xE3o escrever testes. Existem\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://jstherightway.org/#testing-tools\"\n  }), \"diversos frameworks de testes em JS \\xF3timos\"), \", ent\\xE3o encontre um que seu time prefira. Quando voc\\xEA encontrar um que funciona para seu time, ent\\xE3o tenha como objetivo sempre escrever testes para cada nova funcionalidade/m\\xF3dulo que voc\\xEA introduzir. Se seu m\\xE9todo preferido for Desenvolvimento Orientado a Testes (TDD), isso \\xE9 \\xF3timo, mas o ponto principal \\xE9 apenas ter certeza que voc\\xEA est\\xE1 alcan\\xE7ado suas metas de cobertura antes de lan\\xE7ar qualquer funcionalidade, ou refatorar uma j\\xE1 existente.\"), mdx(\"h3\", null, \"Um conceito por teste\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import assert from 'assert';\\n\\ndescribe('MakeMomentJSGreatAgain', () => {\\n  it('handles date boundaries', () => {\\n    let date;\\n\\n    date = new MakeMomentJSGreatAgain('1/1/2015');\\n    date.addDays(30);\\n    assert.equal('1/31/2015', date);\\n\\n    date = new MakeMomentJSGreatAgain('2/1/2016');\\n    date.addDays(28);\\n    assert.equal('02/29/2016', date);\\n\\n    date = new MakeMomentJSGreatAgain('2/1/2015');\\n    date.addDays(28);\\n    assert.equal('03/01/2015', date);\\n  });\\n});\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import assert from 'assert';\\n\\ndescribe('MakeMomentJSGreatAgain', () => {\\n  it('handles 30-day months', () => {\\n    const date = new MakeMomentJSGreatAgain('1/1/2015');\\n    date.addDays(30);\\n    assert.equal('1/31/2015', date);\\n  });\\n\\n  it('handles leap year', () => {\\n    const date = new MakeMomentJSGreatAgain('2/1/2016');\\n    date.addDays(28);\\n    assert.equal('02/29/2016', date);\\n  });\\n\\n  it('handles non-leap year', () => {\\n    const date = new MakeMomentJSGreatAgain('2/1/2015');\\n    date.addDays(28);\\n    assert.equal('03/01/2015', date);\\n  });\\n});\\n\\n\")), mdx(\"h2\", null, \"Concorr\\xEAncia\"), mdx(\"h3\", null, \"Use Promessas, n\\xE3o callbacks\"), mdx(\"p\", null, \"Callbacks n\\xE3o s\\xE3o limpos, e eles causam uma quantidade excessiva de aninhamentos. A partir de ES2015/ES6, Promessas s\\xE3o um tipo nativo global. Use-as!\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import { get } from 'request';\\nimport { writeFile } from 'fs';\\n\\nget('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', (requestErr, response) => {\\n  if (requestErr) {\\n    console.error(requestErr);\\n  } else {\\n    writeFile('article.html', response.body, (writeErr) => {\\n      if (writeErr) {\\n        console.error(writeErr);\\n      } else {\\n        console.log('File written');\\n      }\\n    });\\n  }\\n});\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import { get } from 'request';\\nimport { writeFile } from 'fs';\\n\\nget('https://en.wikipedia.org/wiki/Robert_Cecil_Martin')\\n  .then((response) => {\\n    return writeFile('article.html', response);\\n  })\\n  .then(() => {\\n    console.log('File written');\\n  })\\n  .catch((err) => {\\n    console.error(err);\\n  });\\n\\n\")), mdx(\"h3\", null, \"Async/Await s\\xE3o ainda mais limpas que Promessas\"), mdx(\"p\", null, \"Promessas s\\xE3o uma alternativa bem mais limpa que callbacks, mas o ES2017/ES8 traz\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async\"), \"\\xA0e\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"await\"), \"\\xA0que oferecem uma solu\\xE7\\xE3o ainda mais limpa. Tudo o que voc\\xEA precisa \\xE9 uma fun\\xE7\\xE3o que tem como prefixo a palavra-chave\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async\"), \", e ent\\xE3o voc\\xEA pode escrever sua logica imperativamente sem usar\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"then\"), \"\\xA0para encadear suas fun\\xE7\\xF5es. Use isto se voc\\xEA puder tirar vantagem das funcionalidades do ES2017/ES8 hoje!\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import { get } from 'request-promise';\\nimport { writeFile } from 'fs-promise';\\n\\nget('https://en.wikipedia.org/wiki/Robert_Cecil_Martin')\\n  .then((response) => {\\n    return writeFile('article.html', response);\\n  })\\n  .then(() => {\\n    console.log('File written');\\n  })\\n  .catch((err) => {\\n    console.error(err);\\n  });\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import { get } from 'request-promise';\\nimport { writeFile } from 'fs-promise';\\n\\nasync function getCleanCodeArticle() {\\n  try {\\n    const response = await get('https://en.wikipedia.org/wiki/Robert_Cecil_Martin');\\n    await writeFile('article.html', response);\\n    console.log('File written');\\n  } catch(err) {\\n    console.error(err);\\n  }\\n}\\n\\n\")), mdx(\"h2\", null, \"Tratamento de Erros\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"throw error\"), \"\\xA0\\xE9 uma coisa boa! Eles significam que o programa identificou\\\\\\ncom sucesso quando algo deu errado e est\\xE1 permitindo que voc\\xEA saiba parando\\\\\\na execu\\xE7\\xE3o da fun\\xE7\\xE3o no processo atual, fechando o processo (em Node), e\\\\\\nnotificando voc\\xEA no console com a pilha de processos.\"), mdx(\"h3\", null, \"N\\xE3o ignore erros capturados\"), mdx(\"p\", null, \"N\\xE3o fazer nada com um erro capturado n\\xE3o te d\\xE1 a habilidade de resolv\\xEA-lo ou\\\\\\nreagir ao erro informado. Exibir um log no console(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \") n\\xE3o \\xE9 muito\\\\\\nmelhor porque muitas vezes ele pode ficar perdido entre um monte de outras\\\\\\ncoisas impressas no console. Se voc\\xEA envolver qualquer peda\\xE7o de c\\xF3digo em um\\\\\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try/catch\"), \"\\xA0isso significa que voc\\xEA acredita que um erro pode ocorrer l\\xE1 e ent\\xE3o\\\\\\nvoc\\xEA deveria ter um plano, ou criar caminho de c\\xF3digo para quando isso ocorrer.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"try {\\n  functionThatMightThrow();\\n} catch (error) {\\n  console.log(error);\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"try {\\n  functionThatMightThrow();\\n} catch (error) {\\n  // Uma op\\xE7\\xE3o (mais chamativa que console.log):\\n  console.error(error);\\n  // Outra op\\xE7\\xE3o:\\n  notifyUserOfError(error);\\n  // Outra op\\xE7\\xE3o:\\n  reportErrorToService(error);\\n  // OU as tr\\xEAs!\\n}\\n\\n\")), mdx(\"h3\", null, \"N\\xE3o ignore promessas rejeitadas\"), mdx(\"p\", null, \"Pela mesma raz\\xE3o que voc\\xEA n\\xE3o deveria ignorar erros\\\\\\ncaputados de\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try/catch\")), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"getdata()\\n  .then((data) => {\\n    functionThatMightThrow(data);\\n  })\\n  .catch((error) => {\\n    console.log(error);\\n  });\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"getdata()\\n  .then((data) => {\\n    functionThatMightThrow(data);\\n  })\\n  .catch((error) => {\\n    // One option (more noisy than console.log):\\n    console.error(error);\\n    // Another option:\\n    notifyUserOfError(error);\\n    // Another option:\\n    reportErrorToService(error);\\n    // OR do all three!\\n  });\\n\\n\")), mdx(\"h2\", null, \"Formata\\xE7\\xE3o\"), mdx(\"p\", null, \"Formata\\xE7\\xE3o \\xE9 subjetiva. Como muitas regras aqui, n\\xE3o h\\xE1 nenhuma regra fixa e\\\\\\nr\\xE1pida que voc\\xEA precisa seguir. O ponto principal \\xE9 N\\xC3O DISCUTA sobre formata\\xE7\\xE3o.\\\\\\nExistem\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://standardjs.com/rules.html\"\n  }), \"muitas ferramentas\"), \"\\xA0para automatizar isso.\\\\\\nUtilize uma! \\xC9 um desperdicio de tempo e dinheiro para engenheiros discutirem sobre\\\\\\nformata\\xE7\\xE3o.\"), mdx(\"p\", null, \"Para coisas que n\\xE3o possam utilizar formata\\xE7\\xE3o autom\\xE1tica (identa\\xE7\\xE3o, tabs vs. espa\\xE7os,\\\\\\naspas simples vs. duplas, etc.) olhe aqui para alguma orienta\\xE7\\xE3o.\"), mdx(\"h3\", null, \"Utilize capitaliza\\xE7\\xE3o consistente\"), mdx(\"p\", null, \"JavaScript n\\xE3o \\xE9 uma linguagem tipada, ent\\xE3o a capitaliza\\xE7\\xE3o diz muito sobre\\\\\\nsuas vari\\xE1veis, fun\\xE7\\xF5es, etc. Estas regras s\\xE3o subjetivas, ent\\xE3o sua equipe\\\\\\npode escolher o que quiserem. O ponto \\xE9, n\\xE3o importa o que voc\\xEAs todos escolham,\\\\\\napenas seja consistente.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const DAYS_IN_WEEK = 7;\\nconst daysInMonth = 30;\\n\\nconst songs = ['Back In Black', 'Stairway to Heaven', 'Hey Jude'];\\nconst Artists = ['ACDC', 'Led Zeppelin', 'The Beatles'];\\n\\nfunction eraseDatabase() {}\\nfunction restore_database() {}\\n\\nclass animal {}\\nclass Alpaca {}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const DAYS_IN_WEEK = 7;\\nconst DAYS_IN_MONTH = 30;\\n\\nconst SONGS = ['Back In Black', 'Stairway to Heaven', 'Hey Jude'];\\nconst ARTISTS = ['ACDC', 'Led Zeppelin', 'The Beatles'];\\n\\nfunction eraseDatabase() {}\\nfunction restoreDatabase() {}\\n\\nclass Animal {}\\nclass Alpaca {}\\n\\n\")), mdx(\"h3\", null, \"Fun\\xE7\\xF5es e chamadas de fun\\xE7\\xF5es devem estar pr\\xF3ximas\"), mdx(\"p\", null, \"Se uma fun\\xE7\\xE3o chamar outra, mantenha estas fun\\xE7\\xF5es verticalmente pr\\xF3ximas no arquivo\\\\\\nfonte. Em um cen\\xE1rio ideal, manter a chamada logo acima da fun\\xE7\\xE3o. N\\xF3s tendemos a\\\\\\nler c\\xF3digos de cima para baixo, como num jornal. Por causa disso, fa\\xE7a o seu c\\xF3digo\\\\\\ndesta maneira.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class PerformanceReview {\\n  constructor(employee) {\\n    this.employee = employee;\\n  }\\n\\n  lookupPeers() {\\n    return db.lookup(this.employee, 'peers');\\n  }\\n\\n  lookupManager() {\\n    return db.lookup(this.employee, 'manager');\\n  }\\n\\n  getPeerReviews() {\\n    const peers = this.lookupPeers();\\n    // ...\\n  }\\n\\n  perfReview() {\\n    this.getPeerReviews();\\n    this.getManagerReview();\\n    this.getSelfReview();\\n  }\\n\\n  getManagerReview() {\\n    const manager = this.lookupManager();\\n  }\\n\\n  getSelfReview() {\\n    // ...\\n  }\\n}\\n\\nconst review = new PerformanceReview(employee);\\nreview.perfReview();\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class PerformanceReview {\\n  constructor(employee) {\\n    this.employee = employee;\\n  }\\n\\n  perfReview() {\\n    this.getPeerReviews();\\n    this.getManagerReview();\\n    this.getSelfReview();\\n  }\\n\\n  getPeerReviews() {\\n    const peers = this.lookupPeers();\\n    // ...\\n  }\\n\\n  lookupPeers() {\\n    return db.lookup(this.employee, 'peers');\\n  }\\n\\n  getManagerReview() {\\n    const manager = this.lookupManager();\\n  }\\n\\n  lookupManager() {\\n    return db.lookup(this.employee, 'manager');\\n  }\\n\\n  getSelfReview() {\\n    // ...\\n  }\\n}\\n\\nconst review = new PerformanceReview(employee);\\nreview.perfReview();\\n\\n\")), mdx(\"h2\", null, \"Coment\\xE1rios\"), mdx(\"h3\", null, \"Apenas comente coisas que tenham complexidade de l\\xF3gica de neg\\xF3cio.\"), mdx(\"p\", null, \"Coment\\xE1rios s\\xE3o uma desculpa, n\\xE3o um requisito. Um bom c\\xF3digo documenta-se,\\xA0\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"a maior parte\"), \", por si s\\xF3.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function hashIt(data) {\\n  // A hash\\n  let hash = 0;\\n\\n  // Tamanho da string\\n  const length = data.length;\\n\\n  // Loop em cada caracter da informa\\xE7\\xE3o\\n  for (let i = 0; i < length; i++) {\\n    // Pega o c\\xF3digo do caracter.\\n    const char = data.charCodeAt(i);\\n    // Cria a hash\\n    hash = ((hash << 5) - hash) + char;\\n    // Converte para um integer 32-bit\\n    hash &= hash;\\n  }\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"\\nfunction hashIt(data) {\\n  let hash = 0;\\n  const length = data.length;\\n\\n  for (let i = 0; i < length; i++) {\\n    const char = data.charCodeAt(i);\\n    hash = ((hash << 5) - hash) + char;\\n\\n    // Converte para um integer 32-bit\\n    hash &= hash;\\n  }\\n}\\n\\n\")), mdx(\"h3\", null, \"N\\xE3o deixe c\\xF3digo comentado na sua base de c\\xF3digo\"), mdx(\"p\", null, \"Controle de vers\\xE3o existe por uma raz\\xE3o. Deixar c\\xF3digos velhos no seu hist\\xF3rico.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"doStuff();\\n// doOtherStuff();\\n// doSomeMoreStuff();\\n// doSoMuchStuff();\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"doStuff();\\n\\n\")), mdx(\"h3\", null, \"N\\xE3o comente registro de altera\\xE7\\xF5es\"), mdx(\"p\", null, \"Lembre-se, utilize controle de vers\\xE3o! N\\xE3o tem necessidade em deixar c\\xF3digos\\\\\\ninutlizados, c\\xF3digos comentados e especialmente registros de altera\\xE7\\xF5es.\\\\\\nUtilize\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git log\"), \"\\xA0para pegar o hist\\xF3rico!\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"/**\\n * 2016-12-20: Removidas monads, n\\xE3o entendia elas (RM)\\n * 2016-10-01: Melhoria utilizando monads especiais (JP)\\n * 2016-02-03: Removido checagem de tipos (LI)\\n * 2015-03-14: Adicionada checagem de tipos (JR)\\n */\\nfunction combine(a, b) {\\n  return a + b;\\n}\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function combine(a, b) {\\n  return a + b;\\n}\\n\\n\")), mdx(\"h3\", null, \"Evite marcadores de posi\\xE7\\xE3o\"), mdx(\"p\", null, \"Eles geralmente criam ru\\xEDdos. Deixe que as fun\\xE7\\xF5es e nomes de vari\\xE1veis em conjunto\\\\\\ncom a devida identa\\xE7\\xE3o e formata\\xE7\\xE3o deem a estrutura visual para o seu c\\xF3digo.\"), mdx(\"p\", null, \"Ruim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"////////////////////////////////////////////////////////////////////////////////\\n// Intancia\\xE7\\xE3o do Scope Model\\n////////////////////////////////////////////////////////////////////////////////\\n$scope.model = {\\n  menu: 'foo',\\n  nav: 'bar'\\n};\\n\\n////////////////////////////////////////////////////////////////////////////////\\n// Configura\\xE7\\xE3o da Action\\n////////////////////////////////////////////////////////////////////////////////\\nconst actions = function() {\\n  // ...\\n};\\n\\n\")), mdx(\"p\", null, \"Bom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$scope.model = {\\n  menu: 'foo',\\n  nav: 'bar'\\n};\\n\\nconst actions = function() {\\n  // ...\\n};\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#clean-code-javascript","title":"clean-code-javascript","items":[{"url":"#índice","title":"Índice"},{"url":"#introdução","title":"Introdução"},{"url":"#variáveis","title":"Variáveis","items":[{"url":"#use-nomes-de-variáveis-que-tenham-significado-e-sejam-pronunciáveis","title":"Use nomes de variáveis que tenham significado e sejam pronunciáveis"},{"url":"#use-o-mesmo-vocabulário-para-o-mesmo-tipo-de-variável","title":"Use o mesmo vocabulário para o mesmo tipo de variável"},{"url":"#use-nomes-pesquisáveis","title":"Use nomes pesquisáveis"},{"url":"#use-variáveis-explicativas","title":"Use variáveis explicativas"},{"url":"#evite-mapeamento-mental","title":"Evite Mapeamento Mental"},{"url":"#não-adicione-contextos-desnecessários","title":"Não adicione contextos desnecessários"},{"url":"#use-argumentos-padrões-ao-invés-de-curto-circuitar-ou-usar-condicionais","title":"Use argumentos padrões ao invés de curto circuitar ou usar condicionais"}]},{"url":"#funções","title":"Funções","items":[{"url":"#argumentos-de-funções-idealmente-2-ou-menos","title":"Argumentos de funções (idealmente 2 ou menos)"},{"url":"#funções-devem-fazer-uma-coisa","title":"Funções devem fazer uma coisa"},{"url":"#nomes-de-funções-devem-dizer-o-que-elas-fazem","title":"Nomes de funções devem dizer o que elas fazem"},{"url":"#funções-devem-ter-apenas-um-nível-de-abstração","title":"Funções devem ter apenas um nível de abstração"},{"url":"#remova-código-duplicado","title":"Remova código duplicado"},{"url":"#defina-set-objetos-padrões-com-objectassign","title":"Defina (set) objetos padrões com Object.assign"},{"url":"#não-use-flags-como-parâmetros-de-funções","title":"Não use flags como parâmetros de funções"},{"url":"#evite-efeitos-colaterais-parte-1","title":"Evite Efeitos Colaterais (parte 1)"},{"url":"#evite-efeitos-colaterais-parte-2","title":"Evite Efeitos Colaterais (parte 2)"},{"url":"#não-escreva-em-funções-globais","title":"Não escreva em funções globais"},{"url":"#favoreça-programação-funcional-sobre-programação-imperativa","title":"Favoreça programação funcional sobre programação imperativa"},{"url":"#encapsule-condicionais","title":"Encapsule condicionais"},{"url":"#evite-negações-de-condicionais","title":"Evite negações de condicionais"},{"url":"#evite-condicionais","title":"Evite condicionais"},{"url":"#evite-checagem-de-tipos-parte-1","title":"Evite checagem de tipos (parte 1)"},{"url":"#evite-checagem-de-tipos-parte-2","title":"Evite checagem de tipos (parte 2)"},{"url":"#não-otimize-demais","title":"Não otimize demais"},{"url":"#remova-código-morto","title":"Remova código morto"}]},{"url":"#objetos-e-estruturas-de-dados","title":"Objetos e Estruturas de Dados","items":[{"url":"#use-getters-e-setters","title":"Use getters e setters"},{"url":"#faça-objetos-terem-membros-privados","title":"Faça objetos terem membros privados"}]},{"url":"#classes","title":"Classes","items":[{"url":"#prefira-classes-do-es2015es6-ao-invés-de-funções-simples-do-es5","title":"Prefira classes do ES2015/ES6 ao invés de funções simples do ES5"},{"url":"#use-encadeamento-de-métodos","title":"Use encadeamento de métodos"},{"url":"#prefira-composição-ao-invés-de-herança","title":"Prefira composição ao invés de herança"}]},{"url":"#solid","title":"SOLID","items":[{"url":"#princípio-da-responsabilidade-única-srp","title":"Princípio da Responsabilidade Única (SRP)"},{"url":"#princípio-do-abertofechado-ocp","title":"Princípio do Aberto/Fechado (OCP)"},{"url":"#princípio-de-substituição-de-liskov-lsp","title":"Princípio de Substituição de Liskov (LSP)"},{"url":"#princípio-da-segregação-de-interface-isp","title":"Princípio da Segregação de Interface (ISP)"},{"url":"#princípio-da-inversão-de-dependência-dip","title":"Princípio da Inversão de Dependência (DIP)"}]},{"url":"#testes","title":"Testes","items":[{"url":"#um-conceito-por-teste","title":"Um conceito por teste"}]},{"url":"#concorrência","title":"Concorrência","items":[{"url":"#use-promessas-não-callbacks","title":"Use Promessas, não callbacks"},{"url":"#asyncawait-são-ainda-mais-limpas-que-promessas","title":"Async/Await são ainda mais limpas que Promessas"}]},{"url":"#tratamento-de-erros","title":"Tratamento de Erros","items":[{"url":"#não-ignore-erros-capturados","title":"Não ignore erros capturados"},{"url":"#não-ignore-promessas-rejeitadas","title":"Não ignore promessas rejeitadas"}]},{"url":"#formatação","title":"Formatação","items":[{"url":"#utilize-capitalização-consistente","title":"Utilize capitalização consistente"},{"url":"#funções-e-chamadas-de-funções-devem-estar-próximas","title":"Funções e chamadas de funções devem estar próximas"}]},{"url":"#comentários","title":"Comentários","items":[{"url":"#apenas-comente-coisas-que-tenham-complexidade-de-lógica-de-negócio","title":"Apenas comente coisas que tenham complexidade de lógica de negócio."},{"url":"#não-deixe-código-comentado-na-sua-base-de-código","title":"Não deixe código comentado na sua base de código"},{"url":"#não-comente-registro-de-alterações","title":"Não comente registro de alterações"},{"url":"#evite-marcadores-de-posição","title":"Evite marcadores de posição"}]}]}]},"parent":{"__typename":"File","id":"f9b4ffb4-d743-5a63-9b70-e7b51d373929","relativePath":"javascript/js-best-practices.md"},"frontmatter":{"metaTitle":"Clean code em Javascript","metaDescription":"guia para criar um código limpo em js ES6"}},"allMdx":{"edges":[{"node":{"id":"6b27bc12-bb81-5124-8b51-f70c283344a5","fields":{"slug":"/backend","title":"Back-end: Guia de estudos"}}},{"node":{"id":"e985dfcf-d448-5bf6-934b-fe2f7c86d732","fields":{"slug":"/articles","title":"Artigos Originais"}}},{"node":{"id":"2ab1dda2-a787-5684-b0e1-bb6c9017cd8b","fields":{"slug":"/css","title":"CSS"}}},{"node":{"id":"d9b206ac-dbe9-5c8c-a8c1-d802143c7f2f","fields":{"slug":"/devops","title":"Dev-ops: Guia de estudos"}}},{"node":{"id":"a3d209ba-1fb1-5b18-89ba-2927ed6ded51","fields":{"slug":"/git","title":"GIT"}}},{"node":{"id":"95318330-364f-5450-be1c-41ce2e970292","fields":{"slug":"/frontend","title":"Front-end: Guia de estudos"}}},{"node":{"id":"e857beb9-5d6a-597a-93da-293b0945daa5","fields":{"slug":"/html","title":"HTML"}}},{"node":{"id":"c7ef78ad-d567-59b1-8512-2a8b91bdbcb9","fields":{"slug":"/","title":"Reativa Tecnologia - Plataforma"}}},{"node":{"id":"d376f4ab-0540-59dd-a40c-2fdc8e2d559e","fields":{"slug":"/introduction","title":"Introdução"}}},{"node":{"id":"aa3ca2ca-a148-55d8-a8dc-168e08169631","fields":{"slug":"/javascript","title":"Javascript"}}},{"node":{"id":"ea0d2131-26e2-53c7-b48d-bb4475cb725d","fields":{"slug":"/radar","title":"Radar de Tecnologias"}}},{"node":{"id":"ec9854e8-f208-52b3-b115-239e5ffcca70","fields":{"slug":"/articles/1_faculdade","title":"Faculdade de TI é perda de tempo"}}},{"node":{"id":"147bfc38-1a7c-56a2-acf0-3777d79f1794","fields":{"slug":"/articles/como-fazer-as-empresas-sairem-no-tapa","title":"Como fazer as empresas saírem no tapa por você"}}},{"node":{"id":"62759732-4b77-5ca7-be1c-4b050c5fd054","fields":{"slug":"/articles/como-manter-um-dev-rotatitividade","title":"Como manter um dev na sua empresa e evitar rotatividade"}}},{"node":{"id":"a0dbc83b-673e-5cba-a051-081d782710e2","fields":{"slug":"/articles/melhores-empresas-para-nao-trabalhar","title":"Melhores empresas para não se trabalhar"}}},{"node":{"id":"dc9725e8-b1fc-5dac-9199-0566d49d928e","fields":{"slug":"/javascript/eloquent-js","title":"Livro completo de Javascript"}}},{"node":{"id":"1ef3e34a-e6a0-555f-8966-621deebfd45b","fields":{"slug":"/articles/startups-ou-tradicionais","title":"Startups ou empresas grandes tradicionais? Qual é a melhor para se trabalhar?"}}},{"node":{"id":"786e50f3-505c-532c-856e-d978effab9df","fields":{"slug":"/javascript/idiomatic-js","title":"Idiomatic JS"}}},{"node":{"id":"2d079d17-00ef-5b20-9643-0d7e05c622a5","fields":{"slug":"/javascript/js-best-practices","title":"Javascript clean code"}}},{"node":{"id":"6c009ed6-ae0c-5956-a662-341a7da6ca74","fields":{"slug":"/javascript/js-interview","title":"17 perguntas de Javascript para entrevistas"}}},{"node":{"id":"a795f54b-6ed5-57b2-8e56-6029e2b9f65a","fields":{"slug":"/deno","title":"Deno"}}},{"node":{"id":"a0be7563-5fab-5194-ae0e-bbc7eaaf8e62","fields":{"slug":"/deno/1_deno","title":"O que é o Deno?"}}},{"node":{"id":"ecc51cdc-736e-59b1-aa3c-b90114080c5a","fields":{"slug":"/deno/2_porque_usar_deno","title":"Deno vai substituir o Node?"}}},{"node":{"id":"e885ecda-b288-5779-b707-71ee6d722fa6","fields":{"slug":"/deno/3_devo_aprender_deno","title":"Devo estudar Deno?"}}},{"node":{"id":"e2646799-9abd-5262-92cc-dbfd7245a2e7","fields":{"slug":"/deno/4_como_instalar_deno","title":"Como instalar o Deno?"}}},{"node":{"id":"8411a3a9-32de-5b9e-a274-c43ac5ebc480","fields":{"slug":"/javascript/5_js_examples","title":"Exemplos de códigos em Javascript"}}}]}},"pageContext":{"id":"2d079d17-00ef-5b20-9643-0d7e05c622a5"}}}